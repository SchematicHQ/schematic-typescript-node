/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpsertTraitRequestBody
 */
export interface UpsertTraitRequestBody {
    /**
     * Amount to increment the trait by (positive or negative)
     * @type {number}
     * @memberof UpsertTraitRequestBody
     */
    incr?: number | null;
    /**
     * Key/value pairs too identify a company or user
     * @type {object}
     * @memberof UpsertTraitRequestBody
     */
    keys: object;
    /**
     * Value to set the trait to
     * @type {string}
     * @memberof UpsertTraitRequestBody
     */
    set?: string | null;
    /**
     * Name of the trait to update
     * @type {string}
     * @memberof UpsertTraitRequestBody
     */
    trait: string;
    /**
     * Unless this is set, the company or user will be created if it does not already exist
     * @type {boolean}
     * @memberof UpsertTraitRequestBody
     */
    updateOnly?: boolean | null;
}

/**
 * Check if a given object implements the UpsertTraitRequestBody interface.
 */
export function instanceOfUpsertTraitRequestBody(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "keys" in value;
    isInstance = isInstance && "trait" in value;

    return isInstance;
}

export function UpsertTraitRequestBodyFromJSON(json: any): UpsertTraitRequestBody {
    return UpsertTraitRequestBodyFromJSONTyped(json, false);
}

export function UpsertTraitRequestBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpsertTraitRequestBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'incr': !exists(json, 'incr') ? undefined : json['incr'],
        'keys': json['keys'],
        'set': !exists(json, 'set') ? undefined : json['set'],
        'trait': json['trait'],
        'updateOnly': !exists(json, 'update_only') ? undefined : json['update_only'],
    };
}

export function UpsertTraitRequestBodyToJSON(value?: UpsertTraitRequestBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'incr': value.incr,
        'keys': value.keys,
        'set': value.set,
        'trait': value.trait,
        'update_only': value.updateOnly,
    };
}

