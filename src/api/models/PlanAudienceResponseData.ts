/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PlanAudienceResponseData
 */
export interface PlanAudienceResponseData {
    /**
     * 
     * @type {Date}
     * @memberof PlanAudienceResponseData
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof PlanAudienceResponseData
     */
    environmentId: string;
    /**
     * 
     * @type {string}
     * @memberof PlanAudienceResponseData
     */
    flagId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlanAudienceResponseData
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PlanAudienceResponseData
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PlanAudienceResponseData
     */
    planId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlanAudienceResponseData
     */
    priority: number;
    /**
     * 
     * @type {string}
     * @memberof PlanAudienceResponseData
     */
    ruleType: string;
    /**
     * 
     * @type {Date}
     * @memberof PlanAudienceResponseData
     */
    updatedAt: Date;
    /**
     * 
     * @type {boolean}
     * @memberof PlanAudienceResponseData
     */
    value: boolean;
}

/**
 * Check if a given object implements the PlanAudienceResponseData interface.
 */
export function instanceOfPlanAudienceResponseData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "environmentId" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "priority" in value;
    isInstance = isInstance && "ruleType" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function PlanAudienceResponseDataFromJSON(json: any): PlanAudienceResponseData {
    return PlanAudienceResponseDataFromJSONTyped(json, false);
}

export function PlanAudienceResponseDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlanAudienceResponseData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['created_at'])),
        'environmentId': json['environment_id'],
        'flagId': !exists(json, 'flag_id') ? undefined : json['flag_id'],
        'id': json['id'],
        'name': json['name'],
        'planId': !exists(json, 'plan_id') ? undefined : json['plan_id'],
        'priority': json['priority'],
        'ruleType': json['rule_type'],
        'updatedAt': (new Date(json['updated_at'])),
        'value': json['value'],
    };
}

export function PlanAudienceResponseDataToJSON(value?: PlanAudienceResponseData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created_at': (value.createdAt.toISOString()),
        'environment_id': value.environmentId,
        'flag_id': value.flagId,
        'id': value.id,
        'name': value.name,
        'plan_id': value.planId,
        'priority': value.priority,
        'rule_type': value.ruleType,
        'updated_at': (value.updatedAt.toISOString()),
        'value': value.value,
    };
}

