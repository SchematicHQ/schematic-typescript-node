/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateOrUpdateConditionGroupRequestBody } from './CreateOrUpdateConditionGroupRequestBody';
import {
    CreateOrUpdateConditionGroupRequestBodyFromJSON,
    CreateOrUpdateConditionGroupRequestBodyFromJSONTyped,
    CreateOrUpdateConditionGroupRequestBodyToJSON,
} from './CreateOrUpdateConditionGroupRequestBody';
import type { CreateOrUpdateConditionRequestBody } from './CreateOrUpdateConditionRequestBody';
import {
    CreateOrUpdateConditionRequestBodyFromJSON,
    CreateOrUpdateConditionRequestBodyFromJSONTyped,
    CreateOrUpdateConditionRequestBodyToJSON,
} from './CreateOrUpdateConditionRequestBody';

/**
 * 
 * @export
 * @interface AudienceRequestBody
 */
export interface AudienceRequestBody {
    /**
     * 
     * @type {Array<CreateOrUpdateConditionGroupRequestBody>}
     * @memberof AudienceRequestBody
     */
    conditionGroups: Array<CreateOrUpdateConditionGroupRequestBody>;
    /**
     * 
     * @type {Array<CreateOrUpdateConditionRequestBody>}
     * @memberof AudienceRequestBody
     */
    conditions: Array<CreateOrUpdateConditionRequestBody>;
    /**
     * Page limit (default 100)
     * @type {number}
     * @memberof AudienceRequestBody
     */
    limit?: number | null;
    /**
     * Page offset (default 0)
     * @type {number}
     * @memberof AudienceRequestBody
     */
    offset?: number | null;
    /**
     * 
     * @type {string}
     * @memberof AudienceRequestBody
     */
    q?: string | null;
}

/**
 * Check if a given object implements the AudienceRequestBody interface.
 */
export function instanceOfAudienceRequestBody(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "conditionGroups" in value;
    isInstance = isInstance && "conditions" in value;

    return isInstance;
}

export function AudienceRequestBodyFromJSON(json: any): AudienceRequestBody {
    return AudienceRequestBodyFromJSONTyped(json, false);
}

export function AudienceRequestBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): AudienceRequestBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conditionGroups': ((json['condition_groups'] as Array<any>).map(CreateOrUpdateConditionGroupRequestBodyFromJSON)),
        'conditions': ((json['conditions'] as Array<any>).map(CreateOrUpdateConditionRequestBodyFromJSON)),
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'q': !exists(json, 'q') ? undefined : json['q'],
    };
}

export function AudienceRequestBodyToJSON(value?: AudienceRequestBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'condition_groups': ((value.conditionGroups as Array<any>).map(CreateOrUpdateConditionGroupRequestBodyToJSON)),
        'conditions': ((value.conditions as Array<any>).map(CreateOrUpdateConditionRequestBodyToJSON)),
        'limit': value.limit,
        'offset': value.offset,
        'q': value.q,
    };
}

