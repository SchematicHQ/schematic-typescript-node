/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FeatureResponseData } from './FeatureResponseData';
import {
    FeatureResponseDataFromJSON,
    FeatureResponseDataFromJSONTyped,
    FeatureResponseDataToJSON,
} from './FeatureResponseData';
import type { PlanResponseData } from './PlanResponseData';
import {
    PlanResponseDataFromJSON,
    PlanResponseDataFromJSONTyped,
    PlanResponseDataToJSON,
} from './PlanResponseData';

/**
 * The updated resource
 * @export
 * @interface PlanEntitlementResponseData
 */
export interface PlanEntitlementResponseData {
    /**
     * 
     * @type {Date}
     * @memberof PlanEntitlementResponseData
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof PlanEntitlementResponseData
     */
    environmentId: string;
    /**
     * 
     * @type {FeatureResponseData}
     * @memberof PlanEntitlementResponseData
     */
    feature?: FeatureResponseData;
    /**
     * 
     * @type {string}
     * @memberof PlanEntitlementResponseData
     */
    featureId: string;
    /**
     * 
     * @type {string}
     * @memberof PlanEntitlementResponseData
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PlanEntitlementResponseData
     */
    metricPeriod?: string | null;
    /**
     * 
     * @type {PlanResponseData}
     * @memberof PlanEntitlementResponseData
     */
    plan?: PlanResponseData;
    /**
     * 
     * @type {string}
     * @memberof PlanEntitlementResponseData
     */
    planId: string;
    /**
     * 
     * @type {string}
     * @memberof PlanEntitlementResponseData
     */
    ruleId: string;
    /**
     * 
     * @type {Date}
     * @memberof PlanEntitlementResponseData
     */
    updatedAt: Date;
    /**
     * 
     * @type {boolean}
     * @memberof PlanEntitlementResponseData
     */
    valueBool?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PlanEntitlementResponseData
     */
    valueNumeric?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PlanEntitlementResponseData
     */
    valueTraitId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlanEntitlementResponseData
     */
    valueType: string;
}

/**
 * Check if a given object implements the PlanEntitlementResponseData interface.
 */
export function instanceOfPlanEntitlementResponseData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "environmentId" in value;
    isInstance = isInstance && "featureId" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "planId" in value;
    isInstance = isInstance && "ruleId" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "valueType" in value;

    return isInstance;
}

export function PlanEntitlementResponseDataFromJSON(json: any): PlanEntitlementResponseData {
    return PlanEntitlementResponseDataFromJSONTyped(json, false);
}

export function PlanEntitlementResponseDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlanEntitlementResponseData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['created_at'])),
        'environmentId': json['environment_id'],
        'feature': !exists(json, 'feature') ? undefined : FeatureResponseDataFromJSON(json['feature']),
        'featureId': json['feature_id'],
        'id': json['id'],
        'metricPeriod': !exists(json, 'metric_period') ? undefined : json['metric_period'],
        'plan': !exists(json, 'plan') ? undefined : PlanResponseDataFromJSON(json['plan']),
        'planId': json['plan_id'],
        'ruleId': json['rule_id'],
        'updatedAt': (new Date(json['updated_at'])),
        'valueBool': !exists(json, 'value_bool') ? undefined : json['value_bool'],
        'valueNumeric': !exists(json, 'value_numeric') ? undefined : json['value_numeric'],
        'valueTraitId': !exists(json, 'value_trait_id') ? undefined : json['value_trait_id'],
        'valueType': json['value_type'],
    };
}

export function PlanEntitlementResponseDataToJSON(value?: PlanEntitlementResponseData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created_at': (value.createdAt.toISOString()),
        'environment_id': value.environmentId,
        'feature': FeatureResponseDataToJSON(value.feature),
        'feature_id': value.featureId,
        'id': value.id,
        'metric_period': value.metricPeriod,
        'plan': PlanResponseDataToJSON(value.plan),
        'plan_id': value.planId,
        'rule_id': value.ruleId,
        'updated_at': (value.updatedAt.toISOString()),
        'value_bool': value.valueBool,
        'value_numeric': value.valueNumeric,
        'value_trait_id': value.valueTraitId,
        'value_type': value.valueType,
    };
}

