/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  AudienceRequestBody,
  CheckFlagRequestBody,
  CheckFlagResponse,
  CheckFlagsResponse,
  CountApiKeysResponse,
  CountApiRequestsResponse,
  CountCompaniesAudienceResponse,
  CountEventTypesResponse,
  CountEventsResponse,
  CountFlagChecksResponse,
  CountFlagValuesResponse,
  CountUsersAudienceResponse,
  CreateApiKeyRequestBody,
  CreateApiKeyResponse,
  CreateCompanyMembershipResponse,
  CreateCompanyResponse,
  CreateEnvironmentRequestBody,
  CreateEnvironmentResponse,
  CreateEventRequestBody,
  CreateEventResponse,
  CreateFeatureRequestBody,
  CreateFeatureResponse,
  CreateFlagRequestBody,
  CreateFlagResponse,
  CreatePlanRequestBody,
  CreatePlanResponse,
  CreateRuleRequestBody,
  CreateRuleResponse,
  CreateUserResponse,
  DeleteApiKeyResponse,
  DeleteCompanyMembershipResponse,
  DeleteEnvironmentResponse,
  DeleteFeatureResponse,
  DeleteFlagResponse,
  DeletePlanResponse,
  GetApiKeyResponse,
  GetApiRequestResponse,
  GetCompaniesAudienceResponse,
  GetCompanyResponse,
  GetEnvironmentResponse,
  GetEventResponse,
  GetEventTypeResponse,
  GetFeatureResponse,
  GetFlagCheckResponse,
  GetFlagResponse,
  GetOrCreateCompanyMembershipRequestBody,
  GetPlanResponse,
  GetRuleResponse,
  GetUserResponse,
  GetUsersAudienceResponse,
  LatestFlagChecksResponse,
  ListApiKeysResponse,
  ListApiRequestsResponse,
  ListCompaniesResponse,
  ListCompanyMembershipsResponse,
  ListCompanyPlansResponse,
  ListEventTypesResponse,
  ListEventsResponse,
  ListFeaturesResponse,
  ListFlagChecksResponse,
  ListFlagValuesResponse,
  ListFlagsResponse,
  ListMetricCountsHourlyResponse,
  ListMetricCountsResponse,
  ListPlansResponse,
  ListUsersResponse,
  UpdateApiKeyRequestBody,
  UpdateApiKeyResponse,
  UpdateAudienceRequestBody,
  UpdateEntityTraitDefinitionRequestBody,
  UpdateEntityTraitDefinitionResponse,
  UpdateEnvironmentRequestBody,
  UpdateEnvironmentResponse,
  UpdateFeatureRequestBody,
  UpdateFeatureResponse,
  UpdateFlagResponse,
  UpdatePlanAudienceResponse,
  UpdatePlanRequestBody,
  UpdatePlanResponse,
  UpdateRuleRequestBody,
  UpdateRuleResponse,
  UpsertBillingPeriodRequestBody,
  UpsertBillingPeriodResponse,
  UpsertCompanyRequestBody,
  UpsertUserRequestBody,
} from '../models';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AudienceRequestBodyFromJSON,
    AudienceRequestBodyToJSON,
    CheckFlagRequestBodyFromJSON,
    CheckFlagRequestBodyToJSON,
    CheckFlagResponseFromJSON,
    CheckFlagResponseToJSON,
    CheckFlagsResponseFromJSON,
    CheckFlagsResponseToJSON,
    CountApiKeysResponseFromJSON,
    CountApiKeysResponseToJSON,
    CountApiRequestsResponseFromJSON,
    CountApiRequestsResponseToJSON,
    CountCompaniesAudienceResponseFromJSON,
    CountCompaniesAudienceResponseToJSON,
    CountEventTypesResponseFromJSON,
    CountEventTypesResponseToJSON,
    CountEventsResponseFromJSON,
    CountEventsResponseToJSON,
    CountFlagChecksResponseFromJSON,
    CountFlagChecksResponseToJSON,
    CountFlagValuesResponseFromJSON,
    CountFlagValuesResponseToJSON,
    CountUsersAudienceResponseFromJSON,
    CountUsersAudienceResponseToJSON,
    CreateApiKeyRequestBodyFromJSON,
    CreateApiKeyRequestBodyToJSON,
    CreateApiKeyResponseFromJSON,
    CreateApiKeyResponseToJSON,
    CreateCompanyMembershipResponseFromJSON,
    CreateCompanyMembershipResponseToJSON,
    CreateCompanyResponseFromJSON,
    CreateCompanyResponseToJSON,
    CreateEnvironmentRequestBodyFromJSON,
    CreateEnvironmentRequestBodyToJSON,
    CreateEnvironmentResponseFromJSON,
    CreateEnvironmentResponseToJSON,
    CreateEventRequestBodyFromJSON,
    CreateEventRequestBodyToJSON,
    CreateEventResponseFromJSON,
    CreateEventResponseToJSON,
    CreateFeatureRequestBodyFromJSON,
    CreateFeatureRequestBodyToJSON,
    CreateFeatureResponseFromJSON,
    CreateFeatureResponseToJSON,
    CreateFlagRequestBodyFromJSON,
    CreateFlagRequestBodyToJSON,
    CreateFlagResponseFromJSON,
    CreateFlagResponseToJSON,
    CreatePlanRequestBodyFromJSON,
    CreatePlanRequestBodyToJSON,
    CreatePlanResponseFromJSON,
    CreatePlanResponseToJSON,
    CreateRuleRequestBodyFromJSON,
    CreateRuleRequestBodyToJSON,
    CreateRuleResponseFromJSON,
    CreateRuleResponseToJSON,
    CreateUserResponseFromJSON,
    CreateUserResponseToJSON,
    DeleteApiKeyResponseFromJSON,
    DeleteApiKeyResponseToJSON,
    DeleteCompanyMembershipResponseFromJSON,
    DeleteCompanyMembershipResponseToJSON,
    DeleteEnvironmentResponseFromJSON,
    DeleteEnvironmentResponseToJSON,
    DeleteFeatureResponseFromJSON,
    DeleteFeatureResponseToJSON,
    DeleteFlagResponseFromJSON,
    DeleteFlagResponseToJSON,
    DeletePlanResponseFromJSON,
    DeletePlanResponseToJSON,
    GetApiKeyResponseFromJSON,
    GetApiKeyResponseToJSON,
    GetApiRequestResponseFromJSON,
    GetApiRequestResponseToJSON,
    GetCompaniesAudienceResponseFromJSON,
    GetCompaniesAudienceResponseToJSON,
    GetCompanyResponseFromJSON,
    GetCompanyResponseToJSON,
    GetEnvironmentResponseFromJSON,
    GetEnvironmentResponseToJSON,
    GetEventResponseFromJSON,
    GetEventResponseToJSON,
    GetEventTypeResponseFromJSON,
    GetEventTypeResponseToJSON,
    GetFeatureResponseFromJSON,
    GetFeatureResponseToJSON,
    GetFlagCheckResponseFromJSON,
    GetFlagCheckResponseToJSON,
    GetFlagResponseFromJSON,
    GetFlagResponseToJSON,
    GetOrCreateCompanyMembershipRequestBodyFromJSON,
    GetOrCreateCompanyMembershipRequestBodyToJSON,
    GetPlanResponseFromJSON,
    GetPlanResponseToJSON,
    GetRuleResponseFromJSON,
    GetRuleResponseToJSON,
    GetUserResponseFromJSON,
    GetUserResponseToJSON,
    GetUsersAudienceResponseFromJSON,
    GetUsersAudienceResponseToJSON,
    LatestFlagChecksResponseFromJSON,
    LatestFlagChecksResponseToJSON,
    ListApiKeysResponseFromJSON,
    ListApiKeysResponseToJSON,
    ListApiRequestsResponseFromJSON,
    ListApiRequestsResponseToJSON,
    ListCompaniesResponseFromJSON,
    ListCompaniesResponseToJSON,
    ListCompanyMembershipsResponseFromJSON,
    ListCompanyMembershipsResponseToJSON,
    ListCompanyPlansResponseFromJSON,
    ListCompanyPlansResponseToJSON,
    ListEventTypesResponseFromJSON,
    ListEventTypesResponseToJSON,
    ListEventsResponseFromJSON,
    ListEventsResponseToJSON,
    ListFeaturesResponseFromJSON,
    ListFeaturesResponseToJSON,
    ListFlagChecksResponseFromJSON,
    ListFlagChecksResponseToJSON,
    ListFlagValuesResponseFromJSON,
    ListFlagValuesResponseToJSON,
    ListFlagsResponseFromJSON,
    ListFlagsResponseToJSON,
    ListMetricCountsHourlyResponseFromJSON,
    ListMetricCountsHourlyResponseToJSON,
    ListMetricCountsResponseFromJSON,
    ListMetricCountsResponseToJSON,
    ListPlansResponseFromJSON,
    ListPlansResponseToJSON,
    ListUsersResponseFromJSON,
    ListUsersResponseToJSON,
    UpdateApiKeyRequestBodyFromJSON,
    UpdateApiKeyRequestBodyToJSON,
    UpdateApiKeyResponseFromJSON,
    UpdateApiKeyResponseToJSON,
    UpdateAudienceRequestBodyFromJSON,
    UpdateAudienceRequestBodyToJSON,
    UpdateEntityTraitDefinitionRequestBodyFromJSON,
    UpdateEntityTraitDefinitionRequestBodyToJSON,
    UpdateEntityTraitDefinitionResponseFromJSON,
    UpdateEntityTraitDefinitionResponseToJSON,
    UpdateEnvironmentRequestBodyFromJSON,
    UpdateEnvironmentRequestBodyToJSON,
    UpdateEnvironmentResponseFromJSON,
    UpdateEnvironmentResponseToJSON,
    UpdateFeatureRequestBodyFromJSON,
    UpdateFeatureRequestBodyToJSON,
    UpdateFeatureResponseFromJSON,
    UpdateFeatureResponseToJSON,
    UpdateFlagResponseFromJSON,
    UpdateFlagResponseToJSON,
    UpdatePlanAudienceResponseFromJSON,
    UpdatePlanAudienceResponseToJSON,
    UpdatePlanRequestBodyFromJSON,
    UpdatePlanRequestBodyToJSON,
    UpdatePlanResponseFromJSON,
    UpdatePlanResponseToJSON,
    UpdateRuleRequestBodyFromJSON,
    UpdateRuleRequestBodyToJSON,
    UpdateRuleResponseFromJSON,
    UpdateRuleResponseToJSON,
    UpsertBillingPeriodRequestBodyFromJSON,
    UpsertBillingPeriodRequestBodyToJSON,
    UpsertBillingPeriodResponseFromJSON,
    UpsertBillingPeriodResponseToJSON,
    UpsertCompanyRequestBodyFromJSON,
    UpsertCompanyRequestBodyToJSON,
    UpsertUserRequestBodyFromJSON,
    UpsertUserRequestBodyToJSON,
} from '../models';

export interface CheckFlagRequest {
    checkFlagRequestBody: CheckFlagRequestBody;
    key: string;
    xSchematicEnvironmentId?: string;
}

export interface CheckFlagsRequest {
    checkFlagRequestBody: CheckFlagRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CountApiKeysRequest {
    requireEnvironment: boolean;
    xSchematicEnvironmentId?: string;
    environmentId?: string;
    limit?: number;
    offset?: number;
}

export interface CountApiRequestsRequest {
    xSchematicEnvironmentId?: string;
    q?: string;
    limit?: number;
    offset?: number;
}

export interface CountCompaniesAudienceRequest {
    audienceRequestBody: AudienceRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CountEventTypesRequest {
    xSchematicEnvironmentId?: string;
    q?: string;
    limit?: number;
    offset?: number;
}

export interface CountEventsRequest {
    xSchematicEnvironmentId?: string;
    companyId?: string;
    userId?: string;
    featureId?: string;
    eventSubtype?: string;
    limit?: number;
    offset?: number;
}

export interface CountFlagChecksRequest {
    xSchematicEnvironmentId?: string;
    flagId?: string;
    flagIds?: Array<string>;
    id?: string;
    limit?: number;
    offset?: number;
}

export interface CountFlagValuesRequest {
    entityType: number;
    xSchematicEnvironmentId?: string;
    companyId?: string;
    userId?: string;
    flagId?: string;
    limit?: number;
    offset?: number;
}

export interface CountUsersAudienceRequest {
    audienceRequestBody: AudienceRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CreateApiKeyRequest {
    createApiKeyRequestBody: CreateApiKeyRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CreateCompanyRequest {
    upsertCompanyRequestBody: UpsertCompanyRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CreateCompanyMembershipRequest {
    getOrCreateCompanyMembershipRequestBody: GetOrCreateCompanyMembershipRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CreateEnvironmentRequest {
    createEnvironmentRequestBody: CreateEnvironmentRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CreateEventRequest {
    createEventRequestBody: CreateEventRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CreateFeatureRequest {
    createFeatureRequestBody: CreateFeatureRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CreateFlagRequest {
    createFlagRequestBody: CreateFlagRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CreatePlanRequest {
    createPlanRequestBody: CreatePlanRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CreateRuleRequest {
    createRuleRequestBody: CreateRuleRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CreateUserRequest {
    upsertUserRequestBody: UpsertUserRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface DeleteApiKeyRequest {
    apiKeyId: string;
    xSchematicEnvironmentId?: string;
}

export interface DeleteCompanyMembershipRequest {
    companyMembershipId: string;
    xSchematicEnvironmentId?: string;
}

export interface DeleteEnvironmentRequest {
    environmentId: string;
    xSchematicEnvironmentId?: string;
}

export interface DeleteFeatureRequest {
    featureId: string;
    xSchematicEnvironmentId?: string;
}

export interface DeleteFlagRequest {
    flagId: string;
    xSchematicEnvironmentId?: string;
}

export interface DeletePlanRequest {
    planId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetApiKeyRequest {
    apiKeyId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetApiRequestRequest {
    apiRequestId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetCompaniesAudienceRequest {
    audienceRequestBody: AudienceRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface GetCompanyRequest {
    companyId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetEnvironmentRequest {
    environmentId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetEventRequest {
    eventId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetEventTypeRequest {
    key: string;
    xSchematicEnvironmentId?: string;
}

export interface GetFeatureRequest {
    featureId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetFlagRequest {
    flagId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetFlagCheckRequest {
    flagCheckId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetPlanRequest {
    planId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetRuleRequest {
    ruleId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetUserRequest {
    userId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetUsersAudienceRequest {
    audienceRequestBody: AudienceRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface LatestFlagChecksRequest {
    xSchematicEnvironmentId?: string;
    flagId?: string;
    flagIds?: Array<string>;
    id?: string;
    limit?: number;
    offset?: number;
}

export interface ListApiKeysRequest {
    requireEnvironment: boolean;
    xSchematicEnvironmentId?: string;
    environmentId?: string;
    limit?: number;
    offset?: number;
}

export interface ListApiRequestsRequest {
    xSchematicEnvironmentId?: string;
    q?: string;
    limit?: number;
    offset?: number;
}

export interface ListCompaniesRequest {
    xSchematicEnvironmentId?: string;
    ids?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface ListCompanyMembershipsRequest {
    xSchematicEnvironmentId?: string;
    companyId?: string;
    userId?: string;
    limit?: number;
    offset?: number;
}

export interface ListCompanyPlansRequest {
    xSchematicEnvironmentId?: string;
    companyId?: string;
    planId?: string;
    active?: boolean;
    limit?: number;
    offset?: number;
}

export interface ListEventTypesRequest {
    xSchematicEnvironmentId?: string;
    q?: string;
    limit?: number;
    offset?: number;
}

export interface ListEventsRequest {
    xSchematicEnvironmentId?: string;
    companyId?: string;
    userId?: string;
    featureId?: string;
    eventSubtype?: string;
    limit?: number;
    offset?: number;
}

export interface ListFeaturesRequest {
    xSchematicEnvironmentId?: string;
    limit?: number;
    offset?: number;
}

export interface ListFlagChecksRequest {
    xSchematicEnvironmentId?: string;
    flagId?: string;
    flagIds?: Array<string>;
    id?: string;
    limit?: number;
    offset?: number;
}

export interface ListFlagValuesRequest {
    entityType: number;
    xSchematicEnvironmentId?: string;
    companyId?: string;
    userId?: string;
    flagId?: string;
    limit?: number;
    offset?: number;
}

export interface ListFlagsRequest {
    xSchematicEnvironmentId?: string;
    featureId?: string;
    flagIds?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface ListMetricCountsRequest {
    eventSubtype: string;
    xSchematicEnvironmentId?: string;
    startTime?: Date;
    endTime?: Date;
    eventSubtypes?: Array<string>;
    companyId?: string;
    userId?: string;
    limit?: number;
    offset?: number;
    grouping?: string;
}

export interface ListMetricCountsHourlyRequest {
    eventSubtype: string;
    xSchematicEnvironmentId?: string;
    startTime?: Date;
    endTime?: Date;
    eventSubtypes?: Array<string>;
    companyId?: string;
    userId?: string;
    limit?: number;
    offset?: number;
}

export interface ListPlansRequest {
    xSchematicEnvironmentId?: string;
    limit?: number;
    offset?: number;
}

export interface ListUsersRequest {
    xSchematicEnvironmentId?: string;
    ids?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface UpdateApiKeyRequest {
    updateApiKeyRequestBody: UpdateApiKeyRequestBody;
    apiKeyId: string;
    xSchematicEnvironmentId?: string;
}

export interface UpdateEntityTraitDefinitionRequest {
    updateEntityTraitDefinitionRequestBody: UpdateEntityTraitDefinitionRequestBody;
    entityTraitDefinitionId: string;
    xSchematicEnvironmentId?: string;
}

export interface UpdateEnvironmentRequest {
    updateEnvironmentRequestBody: UpdateEnvironmentRequestBody;
    environmentId: string;
    xSchematicEnvironmentId?: string;
}

export interface UpdateFeatureRequest {
    updateFeatureRequestBody: UpdateFeatureRequestBody;
    featureId: string;
    xSchematicEnvironmentId?: string;
}

export interface UpdateFlagRequest {
    createFlagRequestBody: CreateFlagRequestBody;
    flagId: string;
    xSchematicEnvironmentId?: string;
}

export interface UpdatePlanRequest {
    updatePlanRequestBody: UpdatePlanRequestBody;
    planId: string;
    xSchematicEnvironmentId?: string;
}

export interface UpdatePlanAudienceRequest {
    updateAudienceRequestBody: UpdateAudienceRequestBody;
    planAudienceId: string;
    xSchematicEnvironmentId?: string;
}

export interface UpdateRuleRequest {
    updateRuleRequestBody: UpdateRuleRequestBody;
    ruleId: string;
    xSchematicEnvironmentId?: string;
}

export interface UpsertBillingPeriodRequest {
    upsertBillingPeriodRequestBody: UpsertBillingPeriodRequestBody;
    key: string;
    xSchematicEnvironmentId?: string;
}

/**
 * 
 */
export class SchematicApi extends runtime.BaseAPI {

    /**
     * Check flag
     */
    async checkFlagRaw(requestParameters: CheckFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckFlagResponse>> {
        if (requestParameters.checkFlagRequestBody === null || requestParameters.checkFlagRequestBody === undefined) {
            throw new runtime.RequiredError('checkFlagRequestBody','Required parameter requestParameters.checkFlagRequestBody was null or undefined when calling checkFlag.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling checkFlag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags/{key}/check`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckFlagRequestBodyToJSON(requestParameters.checkFlagRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckFlagResponseFromJSON(jsonValue));
    }

    /**
     * Check flag
     */
    async checkFlag(requestParameters: CheckFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckFlagResponse> {
        const response = await this.checkFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check flags
     */
    async checkFlagsRaw(requestParameters: CheckFlagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckFlagsResponse>> {
        if (requestParameters.checkFlagRequestBody === null || requestParameters.checkFlagRequestBody === undefined) {
            throw new runtime.RequiredError('checkFlagRequestBody','Required parameter requestParameters.checkFlagRequestBody was null or undefined when calling checkFlags.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags/check`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckFlagRequestBodyToJSON(requestParameters.checkFlagRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckFlagsResponseFromJSON(jsonValue));
    }

    /**
     * Check flags
     */
    async checkFlags(requestParameters: CheckFlagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckFlagsResponse> {
        const response = await this.checkFlagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count api keys
     */
    async countApiKeysRaw(requestParameters: CountApiKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountApiKeysResponse>> {
        if (requestParameters.requireEnvironment === null || requestParameters.requireEnvironment === undefined) {
            throw new runtime.RequiredError('requireEnvironment','Required parameter requestParameters.requireEnvironment was null or undefined when calling countApiKeys.');
        }

        const queryParameters: any = {};

        if (requestParameters.environmentId !== undefined) {
            queryParameters['environment_id'] = requestParameters.environmentId;
        }

        if (requestParameters.requireEnvironment !== undefined) {
            queryParameters['require_environment'] = requestParameters.requireEnvironment;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountApiKeysResponseFromJSON(jsonValue));
    }

    /**
     * Count api keys
     */
    async countApiKeys(requestParameters: CountApiKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountApiKeysResponse> {
        const response = await this.countApiKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count api requests
     */
    async countApiRequestsRaw(requestParameters: CountApiRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountApiRequestsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-requests/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountApiRequestsResponseFromJSON(jsonValue));
    }

    /**
     * Count api requests
     */
    async countApiRequests(requestParameters: CountApiRequestsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountApiRequestsResponse> {
        const response = await this.countApiRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count Companies audience
     */
    async countCompaniesAudienceRaw(requestParameters: CountCompaniesAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountCompaniesAudienceResponse>> {
        if (requestParameters.audienceRequestBody === null || requestParameters.audienceRequestBody === undefined) {
            throw new runtime.RequiredError('audienceRequestBody','Required parameter requestParameters.audienceRequestBody was null or undefined when calling countCompaniesAudience.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/audience/count-companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AudienceRequestBodyToJSON(requestParameters.audienceRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountCompaniesAudienceResponseFromJSON(jsonValue));
    }

    /**
     * Count Companies audience
     */
    async countCompaniesAudience(requestParameters: CountCompaniesAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountCompaniesAudienceResponse> {
        const response = await this.countCompaniesAudienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count event types
     */
    async countEventTypesRaw(requestParameters: CountEventTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountEventTypesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/event-types/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountEventTypesResponseFromJSON(jsonValue));
    }

    /**
     * Count event types
     */
    async countEventTypes(requestParameters: CountEventTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountEventTypesResponse> {
        const response = await this.countEventTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count events
     */
    async countEventsRaw(requestParameters: CountEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountEventsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.featureId !== undefined) {
            queryParameters['feature_id'] = requestParameters.featureId;
        }

        if (requestParameters.eventSubtype !== undefined) {
            queryParameters['event_subtype'] = requestParameters.eventSubtype;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/events/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountEventsResponseFromJSON(jsonValue));
    }

    /**
     * Count events
     */
    async countEvents(requestParameters: CountEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountEventsResponse> {
        const response = await this.countEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count flag checks
     */
    async countFlagChecksRaw(requestParameters: CountFlagChecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountFlagChecksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.flagId !== undefined) {
            queryParameters['flag_id'] = requestParameters.flagId;
        }

        if (requestParameters.flagIds) {
            queryParameters['flag_ids'] = requestParameters.flagIds;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flag-checks/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountFlagChecksResponseFromJSON(jsonValue));
    }

    /**
     * Count flag checks
     */
    async countFlagChecks(requestParameters: CountFlagChecksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountFlagChecksResponse> {
        const response = await this.countFlagChecksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count flag values
     */
    async countFlagValuesRaw(requestParameters: CountFlagValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountFlagValuesResponse>> {
        if (requestParameters.entityType === null || requestParameters.entityType === undefined) {
            throw new runtime.RequiredError('entityType','Required parameter requestParameters.entityType was null or undefined when calling countFlagValues.');
        }

        const queryParameters: any = {};

        if (requestParameters.entityType !== undefined) {
            queryParameters['entity_type'] = requestParameters.entityType;
        }

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.flagId !== undefined) {
            queryParameters['flag_id'] = requestParameters.flagId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flag-values/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountFlagValuesResponseFromJSON(jsonValue));
    }

    /**
     * Count flag values
     */
    async countFlagValues(requestParameters: CountFlagValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountFlagValuesResponse> {
        const response = await this.countFlagValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count Users audience
     */
    async countUsersAudienceRaw(requestParameters: CountUsersAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountUsersAudienceResponse>> {
        if (requestParameters.audienceRequestBody === null || requestParameters.audienceRequestBody === undefined) {
            throw new runtime.RequiredError('audienceRequestBody','Required parameter requestParameters.audienceRequestBody was null or undefined when calling countUsersAudience.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/audience/count-users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AudienceRequestBodyToJSON(requestParameters.audienceRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountUsersAudienceResponseFromJSON(jsonValue));
    }

    /**
     * Count Users audience
     */
    async countUsersAudience(requestParameters: CountUsersAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountUsersAudienceResponse> {
        const response = await this.countUsersAudienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create api key
     */
    async createApiKeyRaw(requestParameters: CreateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateApiKeyResponse>> {
        if (requestParameters.createApiKeyRequestBody === null || requestParameters.createApiKeyRequestBody === undefined) {
            throw new runtime.RequiredError('createApiKeyRequestBody','Required parameter requestParameters.createApiKeyRequestBody was null or undefined when calling createApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApiKeyRequestBodyToJSON(requestParameters.createApiKeyRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateApiKeyResponseFromJSON(jsonValue));
    }

    /**
     * Create api key
     */
    async createApiKey(requestParameters: CreateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateApiKeyResponse> {
        const response = await this.createApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create company
     */
    async createCompanyRaw(requestParameters: CreateCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCompanyResponse>> {
        if (requestParameters.upsertCompanyRequestBody === null || requestParameters.upsertCompanyRequestBody === undefined) {
            throw new runtime.RequiredError('upsertCompanyRequestBody','Required parameter requestParameters.upsertCompanyRequestBody was null or undefined when calling createCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertCompanyRequestBodyToJSON(requestParameters.upsertCompanyRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCompanyResponseFromJSON(jsonValue));
    }

    /**
     * Create company
     */
    async createCompany(requestParameters: CreateCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCompanyResponse> {
        const response = await this.createCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create company membership
     */
    async createCompanyMembershipRaw(requestParameters: CreateCompanyMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCompanyMembershipResponse>> {
        if (requestParameters.getOrCreateCompanyMembershipRequestBody === null || requestParameters.getOrCreateCompanyMembershipRequestBody === undefined) {
            throw new runtime.RequiredError('getOrCreateCompanyMembershipRequestBody','Required parameter requestParameters.getOrCreateCompanyMembershipRequestBody was null or undefined when calling createCompanyMembership.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/company-memberships`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetOrCreateCompanyMembershipRequestBodyToJSON(requestParameters.getOrCreateCompanyMembershipRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCompanyMembershipResponseFromJSON(jsonValue));
    }

    /**
     * Create company membership
     */
    async createCompanyMembership(requestParameters: CreateCompanyMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCompanyMembershipResponse> {
        const response = await this.createCompanyMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create environment
     */
    async createEnvironmentRaw(requestParameters: CreateEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEnvironmentResponse>> {
        if (requestParameters.createEnvironmentRequestBody === null || requestParameters.createEnvironmentRequestBody === undefined) {
            throw new runtime.RequiredError('createEnvironmentRequestBody','Required parameter requestParameters.createEnvironmentRequestBody was null or undefined when calling createEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/environments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEnvironmentRequestBodyToJSON(requestParameters.createEnvironmentRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEnvironmentResponseFromJSON(jsonValue));
    }

    /**
     * Create environment
     */
    async createEnvironment(requestParameters: CreateEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEnvironmentResponse> {
        const response = await this.createEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create event
     */
    async createEventRaw(requestParameters: CreateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEventResponse>> {
        if (requestParameters.createEventRequestBody === null || requestParameters.createEventRequestBody === undefined) {
            throw new runtime.RequiredError('createEventRequestBody','Required parameter requestParameters.createEventRequestBody was null or undefined when calling createEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEventRequestBodyToJSON(requestParameters.createEventRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEventResponseFromJSON(jsonValue));
    }

    /**
     * Create event
     */
    async createEvent(requestParameters: CreateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEventResponse> {
        const response = await this.createEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create feature
     */
    async createFeatureRaw(requestParameters: CreateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFeatureResponse>> {
        if (requestParameters.createFeatureRequestBody === null || requestParameters.createFeatureRequestBody === undefined) {
            throw new runtime.RequiredError('createFeatureRequestBody','Required parameter requestParameters.createFeatureRequestBody was null or undefined when calling createFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/features`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFeatureRequestBodyToJSON(requestParameters.createFeatureRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateFeatureResponseFromJSON(jsonValue));
    }

    /**
     * Create feature
     */
    async createFeature(requestParameters: CreateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFeatureResponse> {
        const response = await this.createFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create flag
     */
    async createFlagRaw(requestParameters: CreateFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFlagResponse>> {
        if (requestParameters.createFlagRequestBody === null || requestParameters.createFlagRequestBody === undefined) {
            throw new runtime.RequiredError('createFlagRequestBody','Required parameter requestParameters.createFlagRequestBody was null or undefined when calling createFlag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFlagRequestBodyToJSON(requestParameters.createFlagRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateFlagResponseFromJSON(jsonValue));
    }

    /**
     * Create flag
     */
    async createFlag(requestParameters: CreateFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFlagResponse> {
        const response = await this.createFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create plan
     */
    async createPlanRaw(requestParameters: CreatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePlanResponse>> {
        if (requestParameters.createPlanRequestBody === null || requestParameters.createPlanRequestBody === undefined) {
            throw new runtime.RequiredError('createPlanRequestBody','Required parameter requestParameters.createPlanRequestBody was null or undefined when calling createPlan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/plans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePlanRequestBodyToJSON(requestParameters.createPlanRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePlanResponseFromJSON(jsonValue));
    }

    /**
     * Create plan
     */
    async createPlan(requestParameters: CreatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePlanResponse> {
        const response = await this.createPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create rule
     */
    async createRuleRaw(requestParameters: CreateRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateRuleResponse>> {
        if (requestParameters.createRuleRequestBody === null || requestParameters.createRuleRequestBody === undefined) {
            throw new runtime.RequiredError('createRuleRequestBody','Required parameter requestParameters.createRuleRequestBody was null or undefined when calling createRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/rules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRuleRequestBodyToJSON(requestParameters.createRuleRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateRuleResponseFromJSON(jsonValue));
    }

    /**
     * Create rule
     */
    async createRule(requestParameters: CreateRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateRuleResponse> {
        const response = await this.createRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUserResponse>> {
        if (requestParameters.upsertUserRequestBody === null || requestParameters.upsertUserRequestBody === undefined) {
            throw new runtime.RequiredError('upsertUserRequestBody','Required parameter requestParameters.upsertUserRequestBody was null or undefined when calling createUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertUserRequestBodyToJSON(requestParameters.upsertUserRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserResponseFromJSON(jsonValue));
    }

    /**
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUserResponse> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete api key
     */
    async deleteApiKeyRaw(requestParameters: DeleteApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteApiKeyResponse>> {
        if (requestParameters.apiKeyId === null || requestParameters.apiKeyId === undefined) {
            throw new runtime.RequiredError('apiKeyId','Required parameter requestParameters.apiKeyId was null or undefined when calling deleteApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys/{api_key_id}`.replace(`{${"api_key_id"}}`, encodeURIComponent(String(requestParameters.apiKeyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteApiKeyResponseFromJSON(jsonValue));
    }

    /**
     * Delete api key
     */
    async deleteApiKey(requestParameters: DeleteApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteApiKeyResponse> {
        const response = await this.deleteApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete company membership
     */
    async deleteCompanyMembershipRaw(requestParameters: DeleteCompanyMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCompanyMembershipResponse>> {
        if (requestParameters.companyMembershipId === null || requestParameters.companyMembershipId === undefined) {
            throw new runtime.RequiredError('companyMembershipId','Required parameter requestParameters.companyMembershipId was null or undefined when calling deleteCompanyMembership.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/company-memberships/{company_membership_id}`.replace(`{${"company_membership_id"}}`, encodeURIComponent(String(requestParameters.companyMembershipId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteCompanyMembershipResponseFromJSON(jsonValue));
    }

    /**
     * Delete company membership
     */
    async deleteCompanyMembership(requestParameters: DeleteCompanyMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCompanyMembershipResponse> {
        const response = await this.deleteCompanyMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete environment
     */
    async deleteEnvironmentRaw(requestParameters: DeleteEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteEnvironmentResponse>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling deleteEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/environments/{environment_id}`.replace(`{${"environment_id"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteEnvironmentResponseFromJSON(jsonValue));
    }

    /**
     * Delete environment
     */
    async deleteEnvironment(requestParameters: DeleteEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteEnvironmentResponse> {
        const response = await this.deleteEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete feature
     */
    async deleteFeatureRaw(requestParameters: DeleteFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFeatureResponse>> {
        if (requestParameters.featureId === null || requestParameters.featureId === undefined) {
            throw new runtime.RequiredError('featureId','Required parameter requestParameters.featureId was null or undefined when calling deleteFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/features/{feature_id}`.replace(`{${"feature_id"}}`, encodeURIComponent(String(requestParameters.featureId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFeatureResponseFromJSON(jsonValue));
    }

    /**
     * Delete feature
     */
    async deleteFeature(requestParameters: DeleteFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFeatureResponse> {
        const response = await this.deleteFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete flag
     */
    async deleteFlagRaw(requestParameters: DeleteFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFlagResponse>> {
        if (requestParameters.flagId === null || requestParameters.flagId === undefined) {
            throw new runtime.RequiredError('flagId','Required parameter requestParameters.flagId was null or undefined when calling deleteFlag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags/{flag_id}`.replace(`{${"flag_id"}}`, encodeURIComponent(String(requestParameters.flagId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFlagResponseFromJSON(jsonValue));
    }

    /**
     * Delete flag
     */
    async deleteFlag(requestParameters: DeleteFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFlagResponse> {
        const response = await this.deleteFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete plan
     */
    async deletePlanRaw(requestParameters: DeletePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePlanResponse>> {
        if (requestParameters.planId === null || requestParameters.planId === undefined) {
            throw new runtime.RequiredError('planId','Required parameter requestParameters.planId was null or undefined when calling deletePlan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/plans/{plan_id}`.replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters.planId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePlanResponseFromJSON(jsonValue));
    }

    /**
     * Delete plan
     */
    async deletePlan(requestParameters: DeletePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePlanResponse> {
        const response = await this.deletePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get api key
     */
    async getApiKeyRaw(requestParameters: GetApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApiKeyResponse>> {
        if (requestParameters.apiKeyId === null || requestParameters.apiKeyId === undefined) {
            throw new runtime.RequiredError('apiKeyId','Required parameter requestParameters.apiKeyId was null or undefined when calling getApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys/{api_key_id}`.replace(`{${"api_key_id"}}`, encodeURIComponent(String(requestParameters.apiKeyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApiKeyResponseFromJSON(jsonValue));
    }

    /**
     * Get api key
     */
    async getApiKey(requestParameters: GetApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApiKeyResponse> {
        const response = await this.getApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get api request
     */
    async getApiRequestRaw(requestParameters: GetApiRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApiRequestResponse>> {
        if (requestParameters.apiRequestId === null || requestParameters.apiRequestId === undefined) {
            throw new runtime.RequiredError('apiRequestId','Required parameter requestParameters.apiRequestId was null or undefined when calling getApiRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-requests/{api_request_id}`.replace(`{${"api_request_id"}}`, encodeURIComponent(String(requestParameters.apiRequestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApiRequestResponseFromJSON(jsonValue));
    }

    /**
     * Get api request
     */
    async getApiRequest(requestParameters: GetApiRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApiRequestResponse> {
        const response = await this.getApiRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Companies audience
     */
    async getCompaniesAudienceRaw(requestParameters: GetCompaniesAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCompaniesAudienceResponse>> {
        if (requestParameters.audienceRequestBody === null || requestParameters.audienceRequestBody === undefined) {
            throw new runtime.RequiredError('audienceRequestBody','Required parameter requestParameters.audienceRequestBody was null or undefined when calling getCompaniesAudience.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/audience/get-companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AudienceRequestBodyToJSON(requestParameters.audienceRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCompaniesAudienceResponseFromJSON(jsonValue));
    }

    /**
     * Get Companies audience
     */
    async getCompaniesAudience(requestParameters: GetCompaniesAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCompaniesAudienceResponse> {
        const response = await this.getCompaniesAudienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get company
     */
    async getCompanyRaw(requestParameters: GetCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCompanyResponse>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling getCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/companies/{company_id}`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCompanyResponseFromJSON(jsonValue));
    }

    /**
     * Get company
     */
    async getCompany(requestParameters: GetCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCompanyResponse> {
        const response = await this.getCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get environment
     */
    async getEnvironmentRaw(requestParameters: GetEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEnvironmentResponse>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/environments/{environment_id}`.replace(`{${"environment_id"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEnvironmentResponseFromJSON(jsonValue));
    }

    /**
     * Get environment
     */
    async getEnvironment(requestParameters: GetEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEnvironmentResponse> {
        const response = await this.getEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get event
     */
    async getEventRaw(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEventResponse>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/events/{event_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEventResponseFromJSON(jsonValue));
    }

    /**
     * Get event
     */
    async getEvent(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEventResponse> {
        const response = await this.getEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get event type
     */
    async getEventTypeRaw(requestParameters: GetEventTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEventTypeResponse>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling getEventType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/event-types/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEventTypeResponseFromJSON(jsonValue));
    }

    /**
     * Get event type
     */
    async getEventType(requestParameters: GetEventTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEventTypeResponse> {
        const response = await this.getEventTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get feature
     */
    async getFeatureRaw(requestParameters: GetFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeatureResponse>> {
        if (requestParameters.featureId === null || requestParameters.featureId === undefined) {
            throw new runtime.RequiredError('featureId','Required parameter requestParameters.featureId was null or undefined when calling getFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/features/{feature_id}`.replace(`{${"feature_id"}}`, encodeURIComponent(String(requestParameters.featureId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFeatureResponseFromJSON(jsonValue));
    }

    /**
     * Get feature
     */
    async getFeature(requestParameters: GetFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeatureResponse> {
        const response = await this.getFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get flag
     */
    async getFlagRaw(requestParameters: GetFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlagResponse>> {
        if (requestParameters.flagId === null || requestParameters.flagId === undefined) {
            throw new runtime.RequiredError('flagId','Required parameter requestParameters.flagId was null or undefined when calling getFlag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags/{flag_id}`.replace(`{${"flag_id"}}`, encodeURIComponent(String(requestParameters.flagId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlagResponseFromJSON(jsonValue));
    }

    /**
     * Get flag
     */
    async getFlag(requestParameters: GetFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlagResponse> {
        const response = await this.getFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get flag check
     */
    async getFlagCheckRaw(requestParameters: GetFlagCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlagCheckResponse>> {
        if (requestParameters.flagCheckId === null || requestParameters.flagCheckId === undefined) {
            throw new runtime.RequiredError('flagCheckId','Required parameter requestParameters.flagCheckId was null or undefined when calling getFlagCheck.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flag-checks/{flag_check_id}`.replace(`{${"flag_check_id"}}`, encodeURIComponent(String(requestParameters.flagCheckId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlagCheckResponseFromJSON(jsonValue));
    }

    /**
     * Get flag check
     */
    async getFlagCheck(requestParameters: GetFlagCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlagCheckResponse> {
        const response = await this.getFlagCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get plan
     */
    async getPlanRaw(requestParameters: GetPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPlanResponse>> {
        if (requestParameters.planId === null || requestParameters.planId === undefined) {
            throw new runtime.RequiredError('planId','Required parameter requestParameters.planId was null or undefined when calling getPlan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/plans/{plan_id}`.replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters.planId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPlanResponseFromJSON(jsonValue));
    }

    /**
     * Get plan
     */
    async getPlan(requestParameters: GetPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPlanResponse> {
        const response = await this.getPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get rule
     */
    async getRuleRaw(requestParameters: GetRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRuleResponse>> {
        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling getRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/rules/{rule_id}`.replace(`{${"rule_id"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRuleResponseFromJSON(jsonValue));
    }

    /**
     * Get rule
     */
    async getRule(requestParameters: GetRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRuleResponse> {
        const response = await this.getRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserResponseFromJSON(jsonValue));
    }

    /**
     * Get user
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserResponse> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Users audience
     */
    async getUsersAudienceRaw(requestParameters: GetUsersAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUsersAudienceResponse>> {
        if (requestParameters.audienceRequestBody === null || requestParameters.audienceRequestBody === undefined) {
            throw new runtime.RequiredError('audienceRequestBody','Required parameter requestParameters.audienceRequestBody was null or undefined when calling getUsersAudience.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/audience/get-users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AudienceRequestBodyToJSON(requestParameters.audienceRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUsersAudienceResponseFromJSON(jsonValue));
    }

    /**
     * Get Users audience
     */
    async getUsersAudience(requestParameters: GetUsersAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUsersAudienceResponse> {
        const response = await this.getUsersAudienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Latest flag checks
     */
    async latestFlagChecksRaw(requestParameters: LatestFlagChecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LatestFlagChecksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.flagId !== undefined) {
            queryParameters['flag_id'] = requestParameters.flagId;
        }

        if (requestParameters.flagIds) {
            queryParameters['flag_ids'] = requestParameters.flagIds;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flag-checks/latest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LatestFlagChecksResponseFromJSON(jsonValue));
    }

    /**
     * Latest flag checks
     */
    async latestFlagChecks(requestParameters: LatestFlagChecksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LatestFlagChecksResponse> {
        const response = await this.latestFlagChecksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List api keys
     */
    async listApiKeysRaw(requestParameters: ListApiKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListApiKeysResponse>> {
        if (requestParameters.requireEnvironment === null || requestParameters.requireEnvironment === undefined) {
            throw new runtime.RequiredError('requireEnvironment','Required parameter requestParameters.requireEnvironment was null or undefined when calling listApiKeys.');
        }

        const queryParameters: any = {};

        if (requestParameters.environmentId !== undefined) {
            queryParameters['environment_id'] = requestParameters.environmentId;
        }

        if (requestParameters.requireEnvironment !== undefined) {
            queryParameters['require_environment'] = requestParameters.requireEnvironment;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListApiKeysResponseFromJSON(jsonValue));
    }

    /**
     * List api keys
     */
    async listApiKeys(requestParameters: ListApiKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListApiKeysResponse> {
        const response = await this.listApiKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List api requests
     */
    async listApiRequestsRaw(requestParameters: ListApiRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListApiRequestsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListApiRequestsResponseFromJSON(jsonValue));
    }

    /**
     * List api requests
     */
    async listApiRequests(requestParameters: ListApiRequestsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListApiRequestsResponse> {
        const response = await this.listApiRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List companies
     */
    async listCompaniesRaw(requestParameters: ListCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCompaniesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCompaniesResponseFromJSON(jsonValue));
    }

    /**
     * List companies
     */
    async listCompanies(requestParameters: ListCompaniesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCompaniesResponse> {
        const response = await this.listCompaniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List company memberships
     */
    async listCompanyMembershipsRaw(requestParameters: ListCompanyMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCompanyMembershipsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/company-memberships`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCompanyMembershipsResponseFromJSON(jsonValue));
    }

    /**
     * List company memberships
     */
    async listCompanyMemberships(requestParameters: ListCompanyMembershipsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCompanyMembershipsResponse> {
        const response = await this.listCompanyMembershipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List company plans
     */
    async listCompanyPlansRaw(requestParameters: ListCompanyPlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCompanyPlansResponse>> {
        const queryParameters: any = {};

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.planId !== undefined) {
            queryParameters['plan_id'] = requestParameters.planId;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/company-plans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCompanyPlansResponseFromJSON(jsonValue));
    }

    /**
     * List company plans
     */
    async listCompanyPlans(requestParameters: ListCompanyPlansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCompanyPlansResponse> {
        const response = await this.listCompanyPlansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List event types
     */
    async listEventTypesRaw(requestParameters: ListEventTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListEventTypesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/event-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListEventTypesResponseFromJSON(jsonValue));
    }

    /**
     * List event types
     */
    async listEventTypes(requestParameters: ListEventTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListEventTypesResponse> {
        const response = await this.listEventTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List events
     */
    async listEventsRaw(requestParameters: ListEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListEventsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.featureId !== undefined) {
            queryParameters['feature_id'] = requestParameters.featureId;
        }

        if (requestParameters.eventSubtype !== undefined) {
            queryParameters['event_subtype'] = requestParameters.eventSubtype;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListEventsResponseFromJSON(jsonValue));
    }

    /**
     * List events
     */
    async listEvents(requestParameters: ListEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListEventsResponse> {
        const response = await this.listEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List features
     */
    async listFeaturesRaw(requestParameters: ListFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFeaturesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFeaturesResponseFromJSON(jsonValue));
    }

    /**
     * List features
     */
    async listFeatures(requestParameters: ListFeaturesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFeaturesResponse> {
        const response = await this.listFeaturesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List flag checks
     */
    async listFlagChecksRaw(requestParameters: ListFlagChecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFlagChecksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.flagId !== undefined) {
            queryParameters['flag_id'] = requestParameters.flagId;
        }

        if (requestParameters.flagIds) {
            queryParameters['flag_ids'] = requestParameters.flagIds;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flag-checks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFlagChecksResponseFromJSON(jsonValue));
    }

    /**
     * List flag checks
     */
    async listFlagChecks(requestParameters: ListFlagChecksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFlagChecksResponse> {
        const response = await this.listFlagChecksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List flag values
     */
    async listFlagValuesRaw(requestParameters: ListFlagValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFlagValuesResponse>> {
        if (requestParameters.entityType === null || requestParameters.entityType === undefined) {
            throw new runtime.RequiredError('entityType','Required parameter requestParameters.entityType was null or undefined when calling listFlagValues.');
        }

        const queryParameters: any = {};

        if (requestParameters.entityType !== undefined) {
            queryParameters['entity_type'] = requestParameters.entityType;
        }

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.flagId !== undefined) {
            queryParameters['flag_id'] = requestParameters.flagId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flag-values`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFlagValuesResponseFromJSON(jsonValue));
    }

    /**
     * List flag values
     */
    async listFlagValues(requestParameters: ListFlagValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFlagValuesResponse> {
        const response = await this.listFlagValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List flags
     */
    async listFlagsRaw(requestParameters: ListFlagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFlagsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.featureId !== undefined) {
            queryParameters['feature_id'] = requestParameters.featureId;
        }

        if (requestParameters.flagIds) {
            queryParameters['flag_ids'] = requestParameters.flagIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFlagsResponseFromJSON(jsonValue));
    }

    /**
     * List flags
     */
    async listFlags(requestParameters: ListFlagsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFlagsResponse> {
        const response = await this.listFlagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List metric counts
     */
    async listMetricCountsRaw(requestParameters: ListMetricCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListMetricCountsResponse>> {
        if (requestParameters.eventSubtype === null || requestParameters.eventSubtype === undefined) {
            throw new runtime.RequiredError('eventSubtype','Required parameter requestParameters.eventSubtype was null or undefined when calling listMetricCounts.');
        }

        const queryParameters: any = {};

        if (requestParameters.startTime !== undefined) {
            queryParameters['start_time'] = (requestParameters.startTime as any).toISOString();
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['end_time'] = (requestParameters.endTime as any).toISOString();
        }

        if (requestParameters.eventSubtype !== undefined) {
            queryParameters['event_subtype'] = requestParameters.eventSubtype;
        }

        if (requestParameters.eventSubtypes) {
            queryParameters['event_subtypes'] = requestParameters.eventSubtypes;
        }

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.grouping !== undefined) {
            queryParameters['grouping'] = requestParameters.grouping;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/metric-counts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListMetricCountsResponseFromJSON(jsonValue));
    }

    /**
     * List metric counts
     */
    async listMetricCounts(requestParameters: ListMetricCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListMetricCountsResponse> {
        const response = await this.listMetricCountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List metric counts hourly
     */
    async listMetricCountsHourlyRaw(requestParameters: ListMetricCountsHourlyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListMetricCountsHourlyResponse>> {
        if (requestParameters.eventSubtype === null || requestParameters.eventSubtype === undefined) {
            throw new runtime.RequiredError('eventSubtype','Required parameter requestParameters.eventSubtype was null or undefined when calling listMetricCountsHourly.');
        }

        const queryParameters: any = {};

        if (requestParameters.startTime !== undefined) {
            queryParameters['start_time'] = (requestParameters.startTime as any).toISOString();
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['end_time'] = (requestParameters.endTime as any).toISOString();
        }

        if (requestParameters.eventSubtype !== undefined) {
            queryParameters['event_subtype'] = requestParameters.eventSubtype;
        }

        if (requestParameters.eventSubtypes) {
            queryParameters['event_subtypes'] = requestParameters.eventSubtypes;
        }

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/metric-counts-hourly`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListMetricCountsHourlyResponseFromJSON(jsonValue));
    }

    /**
     * List metric counts hourly
     */
    async listMetricCountsHourly(requestParameters: ListMetricCountsHourlyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListMetricCountsHourlyResponse> {
        const response = await this.listMetricCountsHourlyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List plans
     */
    async listPlansRaw(requestParameters: ListPlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPlansResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/plans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPlansResponseFromJSON(jsonValue));
    }

    /**
     * List plans
     */
    async listPlans(requestParameters: ListPlansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPlansResponse> {
        const response = await this.listPlansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List users
     */
    async listUsersRaw(requestParameters: ListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUsersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListUsersResponseFromJSON(jsonValue));
    }

    /**
     * List users
     */
    async listUsers(requestParameters: ListUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUsersResponse> {
        const response = await this.listUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update api key
     */
    async updateApiKeyRaw(requestParameters: UpdateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateApiKeyResponse>> {
        if (requestParameters.updateApiKeyRequestBody === null || requestParameters.updateApiKeyRequestBody === undefined) {
            throw new runtime.RequiredError('updateApiKeyRequestBody','Required parameter requestParameters.updateApiKeyRequestBody was null or undefined when calling updateApiKey.');
        }

        if (requestParameters.apiKeyId === null || requestParameters.apiKeyId === undefined) {
            throw new runtime.RequiredError('apiKeyId','Required parameter requestParameters.apiKeyId was null or undefined when calling updateApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api-keys/{api_key_id}`.replace(`{${"api_key_id"}}`, encodeURIComponent(String(requestParameters.apiKeyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApiKeyRequestBodyToJSON(requestParameters.updateApiKeyRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateApiKeyResponseFromJSON(jsonValue));
    }

    /**
     * Update api key
     */
    async updateApiKey(requestParameters: UpdateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateApiKeyResponse> {
        const response = await this.updateApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update entity trait definition
     */
    async updateEntityTraitDefinitionRaw(requestParameters: UpdateEntityTraitDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateEntityTraitDefinitionResponse>> {
        if (requestParameters.updateEntityTraitDefinitionRequestBody === null || requestParameters.updateEntityTraitDefinitionRequestBody === undefined) {
            throw new runtime.RequiredError('updateEntityTraitDefinitionRequestBody','Required parameter requestParameters.updateEntityTraitDefinitionRequestBody was null or undefined when calling updateEntityTraitDefinition.');
        }

        if (requestParameters.entityTraitDefinitionId === null || requestParameters.entityTraitDefinitionId === undefined) {
            throw new runtime.RequiredError('entityTraitDefinitionId','Required parameter requestParameters.entityTraitDefinitionId was null or undefined when calling updateEntityTraitDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/entity-trait-definitions/{entity_trait_definition_id}`.replace(`{${"entity_trait_definition_id"}}`, encodeURIComponent(String(requestParameters.entityTraitDefinitionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEntityTraitDefinitionRequestBodyToJSON(requestParameters.updateEntityTraitDefinitionRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateEntityTraitDefinitionResponseFromJSON(jsonValue));
    }

    /**
     * Update entity trait definition
     */
    async updateEntityTraitDefinition(requestParameters: UpdateEntityTraitDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateEntityTraitDefinitionResponse> {
        const response = await this.updateEntityTraitDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update environment
     */
    async updateEnvironmentRaw(requestParameters: UpdateEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateEnvironmentResponse>> {
        if (requestParameters.updateEnvironmentRequestBody === null || requestParameters.updateEnvironmentRequestBody === undefined) {
            throw new runtime.RequiredError('updateEnvironmentRequestBody','Required parameter requestParameters.updateEnvironmentRequestBody was null or undefined when calling updateEnvironment.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling updateEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/environments/{environment_id}`.replace(`{${"environment_id"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEnvironmentRequestBodyToJSON(requestParameters.updateEnvironmentRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateEnvironmentResponseFromJSON(jsonValue));
    }

    /**
     * Update environment
     */
    async updateEnvironment(requestParameters: UpdateEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateEnvironmentResponse> {
        const response = await this.updateEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update feature
     */
    async updateFeatureRaw(requestParameters: UpdateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateFeatureResponse>> {
        if (requestParameters.updateFeatureRequestBody === null || requestParameters.updateFeatureRequestBody === undefined) {
            throw new runtime.RequiredError('updateFeatureRequestBody','Required parameter requestParameters.updateFeatureRequestBody was null or undefined when calling updateFeature.');
        }

        if (requestParameters.featureId === null || requestParameters.featureId === undefined) {
            throw new runtime.RequiredError('featureId','Required parameter requestParameters.featureId was null or undefined when calling updateFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/features/{feature_id}`.replace(`{${"feature_id"}}`, encodeURIComponent(String(requestParameters.featureId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFeatureRequestBodyToJSON(requestParameters.updateFeatureRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateFeatureResponseFromJSON(jsonValue));
    }

    /**
     * Update feature
     */
    async updateFeature(requestParameters: UpdateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateFeatureResponse> {
        const response = await this.updateFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update flag
     */
    async updateFlagRaw(requestParameters: UpdateFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateFlagResponse>> {
        if (requestParameters.createFlagRequestBody === null || requestParameters.createFlagRequestBody === undefined) {
            throw new runtime.RequiredError('createFlagRequestBody','Required parameter requestParameters.createFlagRequestBody was null or undefined when calling updateFlag.');
        }

        if (requestParameters.flagId === null || requestParameters.flagId === undefined) {
            throw new runtime.RequiredError('flagId','Required parameter requestParameters.flagId was null or undefined when calling updateFlag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags/{flag_id}`.replace(`{${"flag_id"}}`, encodeURIComponent(String(requestParameters.flagId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFlagRequestBodyToJSON(requestParameters.createFlagRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateFlagResponseFromJSON(jsonValue));
    }

    /**
     * Update flag
     */
    async updateFlag(requestParameters: UpdateFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateFlagResponse> {
        const response = await this.updateFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update plan
     */
    async updatePlanRaw(requestParameters: UpdatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePlanResponse>> {
        if (requestParameters.updatePlanRequestBody === null || requestParameters.updatePlanRequestBody === undefined) {
            throw new runtime.RequiredError('updatePlanRequestBody','Required parameter requestParameters.updatePlanRequestBody was null or undefined when calling updatePlan.');
        }

        if (requestParameters.planId === null || requestParameters.planId === undefined) {
            throw new runtime.RequiredError('planId','Required parameter requestParameters.planId was null or undefined when calling updatePlan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/plans/{plan_id}`.replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters.planId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePlanRequestBodyToJSON(requestParameters.updatePlanRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatePlanResponseFromJSON(jsonValue));
    }

    /**
     * Update plan
     */
    async updatePlan(requestParameters: UpdatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePlanResponse> {
        const response = await this.updatePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update plan audience
     */
    async updatePlanAudienceRaw(requestParameters: UpdatePlanAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePlanAudienceResponse>> {
        if (requestParameters.updateAudienceRequestBody === null || requestParameters.updateAudienceRequestBody === undefined) {
            throw new runtime.RequiredError('updateAudienceRequestBody','Required parameter requestParameters.updateAudienceRequestBody was null or undefined when calling updatePlanAudience.');
        }

        if (requestParameters.planAudienceId === null || requestParameters.planAudienceId === undefined) {
            throw new runtime.RequiredError('planAudienceId','Required parameter requestParameters.planAudienceId was null or undefined when calling updatePlanAudience.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/plan-audiences/{plan_audience_id}`.replace(`{${"plan_audience_id"}}`, encodeURIComponent(String(requestParameters.planAudienceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAudienceRequestBodyToJSON(requestParameters.updateAudienceRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatePlanAudienceResponseFromJSON(jsonValue));
    }

    /**
     * Update plan audience
     */
    async updatePlanAudience(requestParameters: UpdatePlanAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePlanAudienceResponse> {
        const response = await this.updatePlanAudienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update rule
     */
    async updateRuleRaw(requestParameters: UpdateRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateRuleResponse>> {
        if (requestParameters.updateRuleRequestBody === null || requestParameters.updateRuleRequestBody === undefined) {
            throw new runtime.RequiredError('updateRuleRequestBody','Required parameter requestParameters.updateRuleRequestBody was null or undefined when calling updateRule.');
        }

        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling updateRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/rules/{rule_id}`.replace(`{${"rule_id"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRuleRequestBodyToJSON(requestParameters.updateRuleRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateRuleResponseFromJSON(jsonValue));
    }

    /**
     * Update rule
     */
    async updateRule(requestParameters: UpdateRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateRuleResponse> {
        const response = await this.updateRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upsert billing period
     */
    async upsertBillingPeriodRaw(requestParameters: UpsertBillingPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpsertBillingPeriodResponse>> {
        if (requestParameters.upsertBillingPeriodRequestBody === null || requestParameters.upsertBillingPeriodRequestBody === undefined) {
            throw new runtime.RequiredError('upsertBillingPeriodRequestBody','Required parameter requestParameters.upsertBillingPeriodRequestBody was null or undefined when calling upsertBillingPeriod.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling upsertBillingPeriod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/billing-periods/{key}/upsert`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertBillingPeriodRequestBodyToJSON(requestParameters.upsertBillingPeriodRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpsertBillingPeriodResponseFromJSON(jsonValue));
    }

    /**
     * Upsert billing period
     */
    async upsertBillingPeriod(requestParameters: UpsertBillingPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpsertBillingPeriodResponse> {
        const response = await this.upsertBillingPeriodRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
