/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestInit } from "node-fetch";
import * as runtime from "../runtime";
import type {
  ApiError,
  CreateBillingProductRequestBody,
  CreateBillingSubscriptionsRequestBody,
  ListProductsResponse,
  UpsertBillingProductResponse,
  UpsertBillingSubscriptionResponse,
} from "../models/index";
import {
  ApiErrorFromJSON,
  ApiErrorToJSON,
  CreateBillingProductRequestBodyFromJSON,
  CreateBillingProductRequestBodyToJSON,
  CreateBillingSubscriptionsRequestBodyFromJSON,
  CreateBillingSubscriptionsRequestBodyToJSON,
  ListProductsResponseFromJSON,
  ListProductsResponseToJSON,
  UpsertBillingProductResponseFromJSON,
  UpsertBillingProductResponseToJSON,
  UpsertBillingSubscriptionResponseFromJSON,
  UpsertBillingSubscriptionResponseToJSON,
} from "../models/index";

export interface ListProductsRequest {
  ids?: Array<string>;
  name?: string;
  limit?: number;
  offset?: number;
}

export interface UpsertBillingProductRequest {
  createBillingProductRequestBody: CreateBillingProductRequestBody;
}

export interface UpsertBillingSubscriptionRequest {
  createBillingSubscriptionsRequestBody: CreateBillingSubscriptionsRequestBody;
}

/**
 *
 */
export class BillingApi extends runtime.BaseAPI {
  /**
   * List products
   */
  async listProductsRaw(
    requestParameters: ListProductsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListProductsResponse>> {
    const queryParameters: any = {};

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/products`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListProductsResponseFromJSON(jsonValue),
    );
  }

  /**
   * List products
   */
  async listProducts(
    requestParameters: ListProductsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListProductsResponse> {
    const response = await this.listProductsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert billing product
   */
  async upsertBillingProductRaw(
    requestParameters: UpsertBillingProductRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertBillingProductResponse>> {
    if (requestParameters["createBillingProductRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createBillingProductRequestBody",
        'Required parameter "createBillingProductRequestBody" was null or undefined when calling upsertBillingProduct().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/product/upsert`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateBillingProductRequestBodyToJSON(
          requestParameters["createBillingProductRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertBillingProductResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert billing product
   */
  async upsertBillingProduct(
    requestParameters: UpsertBillingProductRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertBillingProductResponse> {
    const response = await this.upsertBillingProductRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert billing subscription
   */
  async upsertBillingSubscriptionRaw(
    requestParameters: UpsertBillingSubscriptionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertBillingSubscriptionResponse>> {
    if (requestParameters["createBillingSubscriptionsRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createBillingSubscriptionsRequestBody",
        'Required parameter "createBillingSubscriptionsRequestBody" was null or undefined when calling upsertBillingSubscription().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/billing/subscription/upsert`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateBillingSubscriptionsRequestBodyToJSON(
          requestParameters["createBillingSubscriptionsRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertBillingSubscriptionResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert billing subscription
   */
  async upsertBillingSubscription(
    requestParameters: UpsertBillingSubscriptionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertBillingSubscriptionResponse> {
    const response = await this.upsertBillingSubscriptionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
