/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestInit } from "node-fetch";
import * as runtime from "../runtime";
import type {
  ApiError,
  CreateCRMDealRequestBody,
  CreateCRMProductRequestBody,
  ListCRMProductsResponse,
  UpsertCRMDealResponse,
  UpsertCRMProductResponse,
} from "../models/index";
import {
  ApiErrorFromJSON,
  ApiErrorToJSON,
  CreateCRMDealRequestBodyFromJSON,
  CreateCRMDealRequestBodyToJSON,
  CreateCRMProductRequestBodyFromJSON,
  CreateCRMProductRequestBodyToJSON,
  ListCRMProductsResponseFromJSON,
  ListCRMProductsResponseToJSON,
  UpsertCRMDealResponseFromJSON,
  UpsertCRMDealResponseToJSON,
  UpsertCRMProductResponseFromJSON,
  UpsertCRMProductResponseToJSON,
} from "../models/index";

export interface ListCRMProductsRequest {
  ids?: Array<string>;
  name?: string;
  limit?: number;
  offset?: number;
}

export interface UpsertCRMDealRequest {
  createCRMDealRequestBody: CreateCRMDealRequestBody;
}

export interface UpsertCRMProductRequest {
  createCRMProductRequestBody: CreateCRMProductRequestBody;
}

/**
 *
 */
export class CrmApi extends runtime.BaseAPI {
  /**
   * List c r m products
   */
  async listCRMProductsRaw(
    requestParameters: ListCRMProductsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListCRMProductsResponse>> {
    const queryParameters: any = {};

    if (requestParameters["ids"] != null) {
      queryParameters["ids"] = requestParameters["ids"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/crm/products`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListCRMProductsResponseFromJSON(jsonValue),
    );
  }

  /**
   * List c r m products
   */
  async listCRMProducts(
    requestParameters: ListCRMProductsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListCRMProductsResponse> {
    const response = await this.listCRMProductsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert c r m deal
   */
  async upsertCRMDealRaw(
    requestParameters: UpsertCRMDealRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertCRMDealResponse>> {
    if (requestParameters["createCRMDealRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createCRMDealRequestBody",
        'Required parameter "createCRMDealRequestBody" was null or undefined when calling upsertCRMDeal().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/crm/deals/upsert`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateCRMDealRequestBodyToJSON(
          requestParameters["createCRMDealRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertCRMDealResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert c r m deal
   */
  async upsertCRMDeal(
    requestParameters: UpsertCRMDealRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertCRMDealResponse> {
    const response = await this.upsertCRMDealRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Upsert c r m product
   */
  async upsertCRMProductRaw(
    requestParameters: UpsertCRMProductRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpsertCRMProductResponse>> {
    if (requestParameters["createCRMProductRequestBody"] == null) {
      throw new runtime.RequiredError(
        "createCRMProductRequestBody",
        'Required parameter "createCRMProductRequestBody" was null or undefined when calling upsertCRMProduct().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["X-Schematic-Api-Key"] = await this.configuration.apiKey(
        "X-Schematic-Api-Key",
      ); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/crm/products/upsert`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateCRMProductRequestBodyToJSON(
          requestParameters["createCRMProductRequestBody"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpsertCRMProductResponseFromJSON(jsonValue),
    );
  }

  /**
   * Upsert c r m product
   */
  async upsertCRMProduct(
    requestParameters: UpsertCRMProductRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpsertCRMProductResponse> {
    const response = await this.upsertCRMProductRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
