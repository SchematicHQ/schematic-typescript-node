/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  AudienceRequestBody,
  CheckFlagRequestBody,
  CheckFlagResponse,
  CheckFlagsResponse,
  CountCompaniesAudienceResponse,
  CountFlagChecksResponse,
  CountFlagValuesResponse,
  CountUsersAudienceResponse,
  CreateFeatureRequestBody,
  CreateFeatureResponse,
  CreateFlagRequestBody,
  CreateFlagResponse,
  CreateRuleRequestBody,
  CreateRuleResponse,
  DeleteFeatureResponse,
  DeleteFlagResponse,
  GetCompaniesAudienceResponse,
  GetFeatureResponse,
  GetFlagCheckResponse,
  GetFlagResponse,
  GetRuleResponse,
  GetUsersAudienceResponse,
  LatestFlagChecksResponse,
  ListFeaturesResponse,
  ListFlagChecksResponse,
  ListFlagValuesResponse,
  ListFlagsResponse,
  UpdateFeatureRequestBody,
  UpdateFeatureResponse,
  UpdateFlagResponse,
  UpdateRuleRequestBody,
  UpdateRuleResponse,
} from '../models';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AudienceRequestBodyFromJSON,
    AudienceRequestBodyToJSON,
    CheckFlagRequestBodyFromJSON,
    CheckFlagRequestBodyToJSON,
    CheckFlagResponseFromJSON,
    CheckFlagResponseToJSON,
    CheckFlagsResponseFromJSON,
    CheckFlagsResponseToJSON,
    CountCompaniesAudienceResponseFromJSON,
    CountCompaniesAudienceResponseToJSON,
    CountFlagChecksResponseFromJSON,
    CountFlagChecksResponseToJSON,
    CountFlagValuesResponseFromJSON,
    CountFlagValuesResponseToJSON,
    CountUsersAudienceResponseFromJSON,
    CountUsersAudienceResponseToJSON,
    CreateFeatureRequestBodyFromJSON,
    CreateFeatureRequestBodyToJSON,
    CreateFeatureResponseFromJSON,
    CreateFeatureResponseToJSON,
    CreateFlagRequestBodyFromJSON,
    CreateFlagRequestBodyToJSON,
    CreateFlagResponseFromJSON,
    CreateFlagResponseToJSON,
    CreateRuleRequestBodyFromJSON,
    CreateRuleRequestBodyToJSON,
    CreateRuleResponseFromJSON,
    CreateRuleResponseToJSON,
    DeleteFeatureResponseFromJSON,
    DeleteFeatureResponseToJSON,
    DeleteFlagResponseFromJSON,
    DeleteFlagResponseToJSON,
    GetCompaniesAudienceResponseFromJSON,
    GetCompaniesAudienceResponseToJSON,
    GetFeatureResponseFromJSON,
    GetFeatureResponseToJSON,
    GetFlagCheckResponseFromJSON,
    GetFlagCheckResponseToJSON,
    GetFlagResponseFromJSON,
    GetFlagResponseToJSON,
    GetRuleResponseFromJSON,
    GetRuleResponseToJSON,
    GetUsersAudienceResponseFromJSON,
    GetUsersAudienceResponseToJSON,
    LatestFlagChecksResponseFromJSON,
    LatestFlagChecksResponseToJSON,
    ListFeaturesResponseFromJSON,
    ListFeaturesResponseToJSON,
    ListFlagChecksResponseFromJSON,
    ListFlagChecksResponseToJSON,
    ListFlagValuesResponseFromJSON,
    ListFlagValuesResponseToJSON,
    ListFlagsResponseFromJSON,
    ListFlagsResponseToJSON,
    UpdateFeatureRequestBodyFromJSON,
    UpdateFeatureRequestBodyToJSON,
    UpdateFeatureResponseFromJSON,
    UpdateFeatureResponseToJSON,
    UpdateFlagResponseFromJSON,
    UpdateFlagResponseToJSON,
    UpdateRuleRequestBodyFromJSON,
    UpdateRuleRequestBodyToJSON,
    UpdateRuleResponseFromJSON,
    UpdateRuleResponseToJSON,
} from '../models';

export interface CheckFlagRequest {
    checkFlagRequestBody: CheckFlagRequestBody;
    key: string;
    xSchematicEnvironmentId?: string;
}

export interface CheckFlagsRequest {
    checkFlagRequestBody: CheckFlagRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CountCompaniesAudienceRequest {
    audienceRequestBody: AudienceRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CountFlagChecksRequest {
    xSchematicEnvironmentId?: string;
    flagId?: string;
    flagIds?: Array<string>;
    limit?: number;
    offset?: number;
    order?: string;
    dir?: string;
}

export interface CountFlagValuesRequest {
    entityType: number;
    xSchematicEnvironmentId?: string;
    companyId?: string;
    userId?: string;
    flagId?: string;
    limit?: number;
    offset?: number;
    order?: string;
    dir?: string;
}

export interface CountUsersAudienceRequest {
    audienceRequestBody: AudienceRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CreateFeatureRequest {
    createFeatureRequestBody: CreateFeatureRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CreateFlagRequest {
    createFlagRequestBody: CreateFlagRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface CreateRuleRequest {
    createRuleRequestBody: CreateRuleRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface DeleteFeatureRequest {
    featureId: string;
    xSchematicEnvironmentId?: string;
}

export interface DeleteFlagRequest {
    flagId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetCompaniesAudienceRequest {
    audienceRequestBody: AudienceRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface GetFeatureRequest {
    featureId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetFlagRequest {
    flagId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetFlagCheckRequest {
    flagCheckId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetRuleRequest {
    ruleId: string;
    xSchematicEnvironmentId?: string;
}

export interface GetUsersAudienceRequest {
    audienceRequestBody: AudienceRequestBody;
    xSchematicEnvironmentId?: string;
}

export interface LatestFlagChecksRequest {
    xSchematicEnvironmentId?: string;
    flagId?: string;
    flagIds?: Array<string>;
    limit?: number;
    offset?: number;
    order?: string;
    dir?: string;
}

export interface ListFeaturesRequest {
    xSchematicEnvironmentId?: string;
    limit?: number;
    offset?: number;
    order?: string;
    dir?: string;
}

export interface ListFlagChecksRequest {
    xSchematicEnvironmentId?: string;
    flagId?: string;
    flagIds?: Array<string>;
    limit?: number;
    offset?: number;
    order?: string;
    dir?: string;
}

export interface ListFlagValuesRequest {
    entityType: number;
    xSchematicEnvironmentId?: string;
    companyId?: string;
    userId?: string;
    flagId?: string;
    limit?: number;
    offset?: number;
    order?: string;
    dir?: string;
}

export interface ListFlagsRequest {
    xSchematicEnvironmentId?: string;
    featureId?: string;
    flagIds?: Array<string>;
    limit?: number;
    offset?: number;
    order?: string;
    dir?: string;
}

export interface UpdateFeatureRequest {
    updateFeatureRequestBody: UpdateFeatureRequestBody;
    featureId: string;
    xSchematicEnvironmentId?: string;
}

export interface UpdateFlagRequest {
    createFlagRequestBody: CreateFlagRequestBody;
    flagId: string;
    xSchematicEnvironmentId?: string;
}

export interface UpdateRuleRequest {
    updateRuleRequestBody: UpdateRuleRequestBody;
    ruleId: string;
    xSchematicEnvironmentId?: string;
}

/**
 * 
 */
export class FeaturesApi extends runtime.BaseAPI {

    /**
     * Check flag
     */
    async checkFlagRaw(requestParameters: CheckFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckFlagResponse>> {
        if (requestParameters.checkFlagRequestBody === null || requestParameters.checkFlagRequestBody === undefined) {
            throw new runtime.RequiredError('checkFlagRequestBody','Required parameter requestParameters.checkFlagRequestBody was null or undefined when calling checkFlag.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling checkFlag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags/{key}/check`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckFlagRequestBodyToJSON(requestParameters.checkFlagRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckFlagResponseFromJSON(jsonValue));
    }

    /**
     * Check flag
     */
    async checkFlag(requestParameters: CheckFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckFlagResponse> {
        const response = await this.checkFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check flags
     */
    async checkFlagsRaw(requestParameters: CheckFlagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckFlagsResponse>> {
        if (requestParameters.checkFlagRequestBody === null || requestParameters.checkFlagRequestBody === undefined) {
            throw new runtime.RequiredError('checkFlagRequestBody','Required parameter requestParameters.checkFlagRequestBody was null or undefined when calling checkFlags.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags/check`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckFlagRequestBodyToJSON(requestParameters.checkFlagRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckFlagsResponseFromJSON(jsonValue));
    }

    /**
     * Check flags
     */
    async checkFlags(requestParameters: CheckFlagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckFlagsResponse> {
        const response = await this.checkFlagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count Companies audience
     */
    async countCompaniesAudienceRaw(requestParameters: CountCompaniesAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountCompaniesAudienceResponse>> {
        if (requestParameters.audienceRequestBody === null || requestParameters.audienceRequestBody === undefined) {
            throw new runtime.RequiredError('audienceRequestBody','Required parameter requestParameters.audienceRequestBody was null or undefined when calling countCompaniesAudience.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/audience/count-companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AudienceRequestBodyToJSON(requestParameters.audienceRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountCompaniesAudienceResponseFromJSON(jsonValue));
    }

    /**
     * Count Companies audience
     */
    async countCompaniesAudience(requestParameters: CountCompaniesAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountCompaniesAudienceResponse> {
        const response = await this.countCompaniesAudienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count flag checks
     */
    async countFlagChecksRaw(requestParameters: CountFlagChecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountFlagChecksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.flagId !== undefined) {
            queryParameters['flag_id'] = requestParameters.flagId;
        }

        if (requestParameters.flagIds) {
            queryParameters['flag_ids'] = requestParameters.flagIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.dir !== undefined) {
            queryParameters['dir'] = requestParameters.dir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flag-checks/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountFlagChecksResponseFromJSON(jsonValue));
    }

    /**
     * Count flag checks
     */
    async countFlagChecks(requestParameters: CountFlagChecksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountFlagChecksResponse> {
        const response = await this.countFlagChecksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count flag values
     */
    async countFlagValuesRaw(requestParameters: CountFlagValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountFlagValuesResponse>> {
        if (requestParameters.entityType === null || requestParameters.entityType === undefined) {
            throw new runtime.RequiredError('entityType','Required parameter requestParameters.entityType was null or undefined when calling countFlagValues.');
        }

        const queryParameters: any = {};

        if (requestParameters.entityType !== undefined) {
            queryParameters['entity_type'] = requestParameters.entityType;
        }

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.flagId !== undefined) {
            queryParameters['flag_id'] = requestParameters.flagId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.dir !== undefined) {
            queryParameters['dir'] = requestParameters.dir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flag-values/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountFlagValuesResponseFromJSON(jsonValue));
    }

    /**
     * Count flag values
     */
    async countFlagValues(requestParameters: CountFlagValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountFlagValuesResponse> {
        const response = await this.countFlagValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count Users audience
     */
    async countUsersAudienceRaw(requestParameters: CountUsersAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountUsersAudienceResponse>> {
        if (requestParameters.audienceRequestBody === null || requestParameters.audienceRequestBody === undefined) {
            throw new runtime.RequiredError('audienceRequestBody','Required parameter requestParameters.audienceRequestBody was null or undefined when calling countUsersAudience.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/audience/count-users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AudienceRequestBodyToJSON(requestParameters.audienceRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountUsersAudienceResponseFromJSON(jsonValue));
    }

    /**
     * Count Users audience
     */
    async countUsersAudience(requestParameters: CountUsersAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountUsersAudienceResponse> {
        const response = await this.countUsersAudienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create feature
     */
    async createFeatureRaw(requestParameters: CreateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFeatureResponse>> {
        if (requestParameters.createFeatureRequestBody === null || requestParameters.createFeatureRequestBody === undefined) {
            throw new runtime.RequiredError('createFeatureRequestBody','Required parameter requestParameters.createFeatureRequestBody was null or undefined when calling createFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/features`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFeatureRequestBodyToJSON(requestParameters.createFeatureRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateFeatureResponseFromJSON(jsonValue));
    }

    /**
     * Create feature
     */
    async createFeature(requestParameters: CreateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFeatureResponse> {
        const response = await this.createFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create flag
     */
    async createFlagRaw(requestParameters: CreateFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFlagResponse>> {
        if (requestParameters.createFlagRequestBody === null || requestParameters.createFlagRequestBody === undefined) {
            throw new runtime.RequiredError('createFlagRequestBody','Required parameter requestParameters.createFlagRequestBody was null or undefined when calling createFlag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFlagRequestBodyToJSON(requestParameters.createFlagRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateFlagResponseFromJSON(jsonValue));
    }

    /**
     * Create flag
     */
    async createFlag(requestParameters: CreateFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFlagResponse> {
        const response = await this.createFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create rule
     */
    async createRuleRaw(requestParameters: CreateRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateRuleResponse>> {
        if (requestParameters.createRuleRequestBody === null || requestParameters.createRuleRequestBody === undefined) {
            throw new runtime.RequiredError('createRuleRequestBody','Required parameter requestParameters.createRuleRequestBody was null or undefined when calling createRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/rules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRuleRequestBodyToJSON(requestParameters.createRuleRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateRuleResponseFromJSON(jsonValue));
    }

    /**
     * Create rule
     */
    async createRule(requestParameters: CreateRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateRuleResponse> {
        const response = await this.createRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete feature
     */
    async deleteFeatureRaw(requestParameters: DeleteFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFeatureResponse>> {
        if (requestParameters.featureId === null || requestParameters.featureId === undefined) {
            throw new runtime.RequiredError('featureId','Required parameter requestParameters.featureId was null or undefined when calling deleteFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/features/{feature_id}`.replace(`{${"feature_id"}}`, encodeURIComponent(String(requestParameters.featureId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFeatureResponseFromJSON(jsonValue));
    }

    /**
     * Delete feature
     */
    async deleteFeature(requestParameters: DeleteFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFeatureResponse> {
        const response = await this.deleteFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete flag
     */
    async deleteFlagRaw(requestParameters: DeleteFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFlagResponse>> {
        if (requestParameters.flagId === null || requestParameters.flagId === undefined) {
            throw new runtime.RequiredError('flagId','Required parameter requestParameters.flagId was null or undefined when calling deleteFlag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags/{flag_id}`.replace(`{${"flag_id"}}`, encodeURIComponent(String(requestParameters.flagId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFlagResponseFromJSON(jsonValue));
    }

    /**
     * Delete flag
     */
    async deleteFlag(requestParameters: DeleteFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFlagResponse> {
        const response = await this.deleteFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Companies audience
     */
    async getCompaniesAudienceRaw(requestParameters: GetCompaniesAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCompaniesAudienceResponse>> {
        if (requestParameters.audienceRequestBody === null || requestParameters.audienceRequestBody === undefined) {
            throw new runtime.RequiredError('audienceRequestBody','Required parameter requestParameters.audienceRequestBody was null or undefined when calling getCompaniesAudience.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/audience/get-companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AudienceRequestBodyToJSON(requestParameters.audienceRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCompaniesAudienceResponseFromJSON(jsonValue));
    }

    /**
     * Get Companies audience
     */
    async getCompaniesAudience(requestParameters: GetCompaniesAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCompaniesAudienceResponse> {
        const response = await this.getCompaniesAudienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get feature
     */
    async getFeatureRaw(requestParameters: GetFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeatureResponse>> {
        if (requestParameters.featureId === null || requestParameters.featureId === undefined) {
            throw new runtime.RequiredError('featureId','Required parameter requestParameters.featureId was null or undefined when calling getFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/features/{feature_id}`.replace(`{${"feature_id"}}`, encodeURIComponent(String(requestParameters.featureId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFeatureResponseFromJSON(jsonValue));
    }

    /**
     * Get feature
     */
    async getFeature(requestParameters: GetFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeatureResponse> {
        const response = await this.getFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get flag
     */
    async getFlagRaw(requestParameters: GetFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlagResponse>> {
        if (requestParameters.flagId === null || requestParameters.flagId === undefined) {
            throw new runtime.RequiredError('flagId','Required parameter requestParameters.flagId was null or undefined when calling getFlag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags/{flag_id}`.replace(`{${"flag_id"}}`, encodeURIComponent(String(requestParameters.flagId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlagResponseFromJSON(jsonValue));
    }

    /**
     * Get flag
     */
    async getFlag(requestParameters: GetFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlagResponse> {
        const response = await this.getFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get flag check
     */
    async getFlagCheckRaw(requestParameters: GetFlagCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFlagCheckResponse>> {
        if (requestParameters.flagCheckId === null || requestParameters.flagCheckId === undefined) {
            throw new runtime.RequiredError('flagCheckId','Required parameter requestParameters.flagCheckId was null or undefined when calling getFlagCheck.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flag-checks/{flag_check_id}`.replace(`{${"flag_check_id"}}`, encodeURIComponent(String(requestParameters.flagCheckId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFlagCheckResponseFromJSON(jsonValue));
    }

    /**
     * Get flag check
     */
    async getFlagCheck(requestParameters: GetFlagCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFlagCheckResponse> {
        const response = await this.getFlagCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get rule
     */
    async getRuleRaw(requestParameters: GetRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRuleResponse>> {
        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling getRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/rules/{rule_id}`.replace(`{${"rule_id"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRuleResponseFromJSON(jsonValue));
    }

    /**
     * Get rule
     */
    async getRule(requestParameters: GetRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRuleResponse> {
        const response = await this.getRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Users audience
     */
    async getUsersAudienceRaw(requestParameters: GetUsersAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUsersAudienceResponse>> {
        if (requestParameters.audienceRequestBody === null || requestParameters.audienceRequestBody === undefined) {
            throw new runtime.RequiredError('audienceRequestBody','Required parameter requestParameters.audienceRequestBody was null or undefined when calling getUsersAudience.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/audience/get-users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AudienceRequestBodyToJSON(requestParameters.audienceRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUsersAudienceResponseFromJSON(jsonValue));
    }

    /**
     * Get Users audience
     */
    async getUsersAudience(requestParameters: GetUsersAudienceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUsersAudienceResponse> {
        const response = await this.getUsersAudienceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Latest flag checks
     */
    async latestFlagChecksRaw(requestParameters: LatestFlagChecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LatestFlagChecksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.flagId !== undefined) {
            queryParameters['flag_id'] = requestParameters.flagId;
        }

        if (requestParameters.flagIds) {
            queryParameters['flag_ids'] = requestParameters.flagIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.dir !== undefined) {
            queryParameters['dir'] = requestParameters.dir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flag-checks/latest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LatestFlagChecksResponseFromJSON(jsonValue));
    }

    /**
     * Latest flag checks
     */
    async latestFlagChecks(requestParameters: LatestFlagChecksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LatestFlagChecksResponse> {
        const response = await this.latestFlagChecksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List features
     */
    async listFeaturesRaw(requestParameters: ListFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFeaturesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.dir !== undefined) {
            queryParameters['dir'] = requestParameters.dir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFeaturesResponseFromJSON(jsonValue));
    }

    /**
     * List features
     */
    async listFeatures(requestParameters: ListFeaturesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFeaturesResponse> {
        const response = await this.listFeaturesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List flag checks
     */
    async listFlagChecksRaw(requestParameters: ListFlagChecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFlagChecksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.flagId !== undefined) {
            queryParameters['flag_id'] = requestParameters.flagId;
        }

        if (requestParameters.flagIds) {
            queryParameters['flag_ids'] = requestParameters.flagIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.dir !== undefined) {
            queryParameters['dir'] = requestParameters.dir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flag-checks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFlagChecksResponseFromJSON(jsonValue));
    }

    /**
     * List flag checks
     */
    async listFlagChecks(requestParameters: ListFlagChecksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFlagChecksResponse> {
        const response = await this.listFlagChecksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List flag values
     */
    async listFlagValuesRaw(requestParameters: ListFlagValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFlagValuesResponse>> {
        if (requestParameters.entityType === null || requestParameters.entityType === undefined) {
            throw new runtime.RequiredError('entityType','Required parameter requestParameters.entityType was null or undefined when calling listFlagValues.');
        }

        const queryParameters: any = {};

        if (requestParameters.entityType !== undefined) {
            queryParameters['entity_type'] = requestParameters.entityType;
        }

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.flagId !== undefined) {
            queryParameters['flag_id'] = requestParameters.flagId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.dir !== undefined) {
            queryParameters['dir'] = requestParameters.dir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flag-values`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFlagValuesResponseFromJSON(jsonValue));
    }

    /**
     * List flag values
     */
    async listFlagValues(requestParameters: ListFlagValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFlagValuesResponse> {
        const response = await this.listFlagValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List flags
     */
    async listFlagsRaw(requestParameters: ListFlagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFlagsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.featureId !== undefined) {
            queryParameters['feature_id'] = requestParameters.featureId;
        }

        if (requestParameters.flagIds) {
            queryParameters['flag_ids'] = requestParameters.flagIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.dir !== undefined) {
            queryParameters['dir'] = requestParameters.dir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFlagsResponseFromJSON(jsonValue));
    }

    /**
     * List flags
     */
    async listFlags(requestParameters: ListFlagsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFlagsResponse> {
        const response = await this.listFlagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update feature
     */
    async updateFeatureRaw(requestParameters: UpdateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateFeatureResponse>> {
        if (requestParameters.updateFeatureRequestBody === null || requestParameters.updateFeatureRequestBody === undefined) {
            throw new runtime.RequiredError('updateFeatureRequestBody','Required parameter requestParameters.updateFeatureRequestBody was null or undefined when calling updateFeature.');
        }

        if (requestParameters.featureId === null || requestParameters.featureId === undefined) {
            throw new runtime.RequiredError('featureId','Required parameter requestParameters.featureId was null or undefined when calling updateFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/features/{feature_id}`.replace(`{${"feature_id"}}`, encodeURIComponent(String(requestParameters.featureId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFeatureRequestBodyToJSON(requestParameters.updateFeatureRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateFeatureResponseFromJSON(jsonValue));
    }

    /**
     * Update feature
     */
    async updateFeature(requestParameters: UpdateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateFeatureResponse> {
        const response = await this.updateFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update flag
     */
    async updateFlagRaw(requestParameters: UpdateFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateFlagResponse>> {
        if (requestParameters.createFlagRequestBody === null || requestParameters.createFlagRequestBody === undefined) {
            throw new runtime.RequiredError('createFlagRequestBody','Required parameter requestParameters.createFlagRequestBody was null or undefined when calling updateFlag.');
        }

        if (requestParameters.flagId === null || requestParameters.flagId === undefined) {
            throw new runtime.RequiredError('flagId','Required parameter requestParameters.flagId was null or undefined when calling updateFlag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/flags/{flag_id}`.replace(`{${"flag_id"}}`, encodeURIComponent(String(requestParameters.flagId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFlagRequestBodyToJSON(requestParameters.createFlagRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateFlagResponseFromJSON(jsonValue));
    }

    /**
     * Update flag
     */
    async updateFlag(requestParameters: UpdateFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateFlagResponse> {
        const response = await this.updateFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update rule
     */
    async updateRuleRaw(requestParameters: UpdateRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateRuleResponse>> {
        if (requestParameters.updateRuleRequestBody === null || requestParameters.updateRuleRequestBody === undefined) {
            throw new runtime.RequiredError('updateRuleRequestBody','Required parameter requestParameters.updateRuleRequestBody was null or undefined when calling updateRule.');
        }

        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling updateRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/rules/{rule_id}`.replace(`{${"rule_id"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRuleRequestBodyToJSON(requestParameters.updateRuleRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateRuleResponseFromJSON(jsonValue));
    }

    /**
     * Update rule
     */
    async updateRule(requestParameters: UpdateRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateRuleResponse> {
        const response = await this.updateRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
