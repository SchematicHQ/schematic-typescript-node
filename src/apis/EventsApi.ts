/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EventsCountGet200Response,
  EventsEventIdGet200Response,
  EventsGet200Response,
  MetricCountsGet200Response,
  MetricsGet200Response,
} from '../models';
import {
    EventsCountGet200ResponseFromJSON,
    EventsCountGet200ResponseToJSON,
    EventsEventIdGet200ResponseFromJSON,
    EventsEventIdGet200ResponseToJSON,
    EventsGet200ResponseFromJSON,
    EventsGet200ResponseToJSON,
    MetricCountsGet200ResponseFromJSON,
    MetricCountsGet200ResponseToJSON,
    MetricsGet200ResponseFromJSON,
    MetricsGet200ResponseToJSON,
} from '../models';

export interface EventsCountGetRequest {
    xSchematicEnvironmentId?: string;
    companyId?: string;
    featureId?: string;
    limit?: number;
    offset?: number;
    order?: string;
    dir?: string;
}

export interface EventsEventIdGetRequest {
    eventId: string;
    xSchematicEnvironmentId?: string;
}

export interface EventsGetRequest {
    xSchematicEnvironmentId?: string;
    companyId?: string;
    featureId?: string;
    limit?: number;
    offset?: number;
    order?: string;
    dir?: string;
}

export interface MetricCountsGetRequest {
    xSchematicEnvironmentId?: string;
    definitionId?: string;
    startTime?: Date;
    endTime?: Date;
    limit?: number;
    offset?: number;
    order?: string;
    dir?: string;
}

export interface MetricsGetRequest {
    xSchematicEnvironmentId?: string;
    limit?: number;
    offset?: number;
    order?: string;
    dir?: string;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     * List events/count
     */
    async eventsCountGetRaw(requestParameters: EventsCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventsCountGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.featureId !== undefined) {
            queryParameters['feature_id'] = requestParameters.featureId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.dir !== undefined) {
            queryParameters['dir'] = requestParameters.dir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/events/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventsCountGet200ResponseFromJSON(jsonValue));
    }

    /**
     * List events/count
     */
    async eventsCountGet(requestParameters: EventsCountGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventsCountGet200Response> {
        const response = await this.eventsCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get event
     */
    async eventsEventIdGetRaw(requestParameters: EventsEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventsEventIdGet200Response>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling eventsEventIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/events/{event_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventsEventIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get event
     */
    async eventsEventIdGet(requestParameters: EventsEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventsEventIdGet200Response> {
        const response = await this.eventsEventIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List events
     */
    async eventsGetRaw(requestParameters: EventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.companyId !== undefined) {
            queryParameters['company_id'] = requestParameters.companyId;
        }

        if (requestParameters.featureId !== undefined) {
            queryParameters['feature_id'] = requestParameters.featureId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.dir !== undefined) {
            queryParameters['dir'] = requestParameters.dir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * List events
     */
    async eventsGet(requestParameters: EventsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventsGet200Response> {
        const response = await this.eventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List metric-counts
     */
    async metricCountsGetRaw(requestParameters: MetricCountsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricCountsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.definitionId !== undefined) {
            queryParameters['definition_id'] = requestParameters.definitionId;
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['start_time'] = (requestParameters.startTime as any).toISOString();
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['end_time'] = (requestParameters.endTime as any).toISOString();
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.dir !== undefined) {
            queryParameters['dir'] = requestParameters.dir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/metric-counts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricCountsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * List metric-counts
     */
    async metricCountsGet(requestParameters: MetricCountsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricCountsGet200Response> {
        const response = await this.metricCountsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List metrics
     */
    async metricsGetRaw(requestParameters: MetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.dir !== undefined) {
            queryParameters['dir'] = requestParameters.dir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSchematicEnvironmentId !== undefined && requestParameters.xSchematicEnvironmentId !== null) {
            headerParameters['X-Schematic-Environment-Id'] = String(requestParameters.xSchematicEnvironmentId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Schematic-Api-Key"] = this.configuration.apiKey("X-Schematic-Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * List metrics
     */
    async metricsGet(requestParameters: MetricsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsGet200Response> {
        const response = await this.metricsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
