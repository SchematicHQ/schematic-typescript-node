/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateOrUpdateConditionRequestBody
 */
export interface CreateOrUpdateConditionRequestBody {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateConditionRequestBody
     */
    conditionType: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateConditionRequestBody
     */
    eventSubtype?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateConditionRequestBody
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateConditionRequestBody
     */
    metricPeriod?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateConditionRequestBody
     */
    metricValue: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateConditionRequestBody
     */
    operator: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateOrUpdateConditionRequestBody
     */
    resourceIds: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateConditionRequestBody
     */
    traitId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateConditionRequestBody
     */
    traitValue?: string | null;
}

/**
 * Check if a given object implements the CreateOrUpdateConditionRequestBody interface.
 */
export function instanceOfCreateOrUpdateConditionRequestBody(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "conditionType" in value;
    isInstance = isInstance && "metricValue" in value;
    isInstance = isInstance && "operator" in value;
    isInstance = isInstance && "resourceIds" in value;

    return isInstance;
}

export function CreateOrUpdateConditionRequestBodyFromJSON(json: any): CreateOrUpdateConditionRequestBody {
    return CreateOrUpdateConditionRequestBodyFromJSONTyped(json, false);
}

export function CreateOrUpdateConditionRequestBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOrUpdateConditionRequestBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conditionType': json['condition_type'],
        'eventSubtype': !exists(json, 'event_subtype') ? undefined : json['event_subtype'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'metricPeriod': !exists(json, 'metric_period') ? undefined : json['metric_period'],
        'metricValue': json['metric_value'],
        'operator': json['operator'],
        'resourceIds': json['resource_ids'],
        'traitId': !exists(json, 'trait_id') ? undefined : json['trait_id'],
        'traitValue': !exists(json, 'trait_value') ? undefined : json['trait_value'],
    };
}

export function CreateOrUpdateConditionRequestBodyToJSON(value?: CreateOrUpdateConditionRequestBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'condition_type': value.conditionType,
        'event_subtype': value.eventSubtype,
        'id': value.id,
        'metric_period': value.metricPeriod,
        'metric_value': value.metricValue,
        'operator': value.operator,
        'resource_ids': value.resourceIds,
        'trait_id': value.traitId,
        'trait_value': value.traitValue,
    };
}

