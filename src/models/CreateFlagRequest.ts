/* tslint:disable */
/* eslint-disable */
/**
 * Schematic API
 * Schematic API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateFeatureRequestFlagRulesInner } from './CreateFeatureRequestFlagRulesInner';
import {
    CreateFeatureRequestFlagRulesInnerFromJSON,
    CreateFeatureRequestFlagRulesInnerFromJSONTyped,
    CreateFeatureRequestFlagRulesInnerToJSON,
} from './CreateFeatureRequestFlagRulesInner';

/**
 * 
 * @export
 * @interface CreateFlagRequest
 */
export interface CreateFlagRequest {
    /**
     * 
     * @type {boolean}
     * @memberof CreateFlagRequest
     */
    defaultValue: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateFlagRequest
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof CreateFlagRequest
     */
    featureId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateFlagRequest
     */
    flagType: string;
    /**
     * 
     * @type {string}
     * @memberof CreateFlagRequest
     */
    key: string;
    /**
     * 
     * @type {string}
     * @memberof CreateFlagRequest
     */
    name: string;
    /**
     * 
     * @type {Array<CreateFeatureRequestFlagRulesInner>}
     * @memberof CreateFlagRequest
     */
    rules: Array<CreateFeatureRequestFlagRulesInner>;
}

/**
 * Check if a given object implements the CreateFlagRequest interface.
 */
export function instanceOfCreateFlagRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "defaultValue" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "flagType" in value;
    isInstance = isInstance && "key" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "rules" in value;

    return isInstance;
}

export function CreateFlagRequestFromJSON(json: any): CreateFlagRequest {
    return CreateFlagRequestFromJSONTyped(json, false);
}

export function CreateFlagRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateFlagRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'defaultValue': json['default_value'],
        'description': json['description'],
        'featureId': !exists(json, 'feature_id') ? undefined : json['feature_id'],
        'flagType': json['flag_type'],
        'key': json['key'],
        'name': json['name'],
        'rules': ((json['rules'] as Array<any>).map(CreateFeatureRequestFlagRulesInnerFromJSON)),
    };
}

export function CreateFlagRequestToJSON(value?: CreateFlagRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'default_value': value.defaultValue,
        'description': value.description,
        'feature_id': value.featureId,
        'flag_type': value.flagType,
        'key': value.key,
        'name': value.name,
        'rules': ((value.rules as Array<any>).map(CreateFeatureRequestFlagRulesInnerToJSON)),
    };
}

